{"id":79,"title":"Find Elements in Tests with Queries from React Testing Library ","estimated_time":7,"user_id":null,"passing_threshold":80,"published_at":"2021-03-03T14:47:29.671+01:00","has_unpublished_changes":false,"has_certificate":false,"external_id":null,"draft_external_id":null,"external_status":"inapplicable","course_type":"bridge","enrollments_count":6,"domain_id":1,"sub_account_id":1,"open_book":null,"description":null,"third_party_course_id":null,"external_course_id":null,"quizzes_count":0,"external_status_message":null,"manual_estimated_time":false,"show_correct_response":true,"max_quiz_attempts":null,"continuing_education_credits":null,"archived_at":null,"config":{},"unpublished_at":null,"external_learning_standard":null,"available_offline":false,"external_version":null,"ordered_slides":[{"id":752,"position":1,"new_position":1,"published_attributes":{"type":"slide","answers":[],"title":"Creating component","body":null,"serialized_body":"\u003cp\u003eReact Testing Library makes it very easy to find elements inside rendered component.\u003c/p\u003e\u003cp\u003eBut first, let\u0026#x27;s create a component we will use to learn about Queries.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003econst Component = () =\u0026gt; (\n  \u0026lt;\u0026gt;\n    \u0026lt;h2\u0026gt;Send\u0026lt;/h2\u0026gt;\n    \u0026lt;form data-testid=\u0026quot;send-name-form\u0026quot;\u0026gt;\n      \u0026lt;label htmlFor=\u0026quot;name\u0026quot;\u0026gt;Name:\u0026lt;/label\u0026gt;\n      \u0026lt;input id=\u0026quot;name\u0026quot; name=\u0026quot;name\u0026quot; /\u0026gt;\n      \u0026lt;button\u0026gt;Send\u0026lt;/button\u0026gt;\n    \u0026lt;/form\u0026gt;\n  \u0026lt;/\u0026gt;\n);\n\nexport default Component;\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"es089","text":"React Testing Library makes it very easy to find elements inside rendered component.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bibje","text":"But first, let's create a component we will use to learn about Queries.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fmd8r","text":"const Component = () =\u003e (\n  \u003c\u003e\n    \u003ch2\u003eSend\u003c/h2\u003e\n    \u003cform data-testid=\"send-name-form\"\u003e\n      \u003clabel htmlFor=\"name\"\u003eName:\u003c/label\u003e\n      \u003cinput id=\"name\" name=\"name\" /\u003e\n      \u003cbutton\u003eSend\u003c/button\u003e\n    \u003c/form\u003e\n  \u003c/\u003e\n);\n\nexport default Component;","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Creating component","body":null,"serialized_body":"\u003cp\u003eReact Testing Library makes it very easy to find elements inside rendered component.\u003c/p\u003e\u003cp\u003eBut first, let\u0026#x27;s create a component we will use to learn about Queries.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003econst Component = () =\u0026gt; (\n  \u0026lt;\u0026gt;\n    \u0026lt;h2\u0026gt;Send\u0026lt;/h2\u0026gt;\n    \u0026lt;form data-testid=\u0026quot;send-name-form\u0026quot;\u0026gt;\n      \u0026lt;label htmlFor=\u0026quot;name\u0026quot;\u0026gt;Name:\u0026lt;/label\u0026gt;\n      \u0026lt;input id=\u0026quot;name\u0026quot; name=\u0026quot;name\u0026quot; /\u0026gt;\n      \u0026lt;button\u0026gt;Send\u0026lt;/button\u0026gt;\n    \u0026lt;/form\u0026gt;\n  \u0026lt;/\u0026gt;\n);\n\nexport default Component;\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"es089","text":"React Testing Library makes it very easy to find elements inside rendered component.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bibje","text":"But first, let's create a component we will use to learn about Queries.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fmd8r","text":"const Component = () =\u003e (\n  \u003c\u003e\n    \u003ch2\u003eSend\u003c/h2\u003e\n    \u003cform data-testid=\"send-name-form\"\u003e\n      \u003clabel htmlFor=\"name\"\u003eName:\u003c/label\u003e\n      \u003cinput id=\"name\" name=\"name\" /\u003e\n      \u003cbutton\u003eSend\u003c/button\u003e\n    \u003c/form\u003e\n  \u003c/\u003e\n);\n\nexport default Component;","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:55:05.332+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":753,"position":2,"new_position":2,"published_attributes":{"type":"slide","answers":[],"title":"Using first query","body":null,"serialized_body":"\u003cp\u003eOne of the most common queries in React Testing Library is getByTestId. It looks for elements that match provided data-testid in your component. We will start with creating very dummy test, which asserts form is present in the component.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should render form\u0026#x27;, () =\u0026gt; {\n  render(\u0026lt;Component /\u0026gt;);\n\n  const form = screen.getByTestId(\u0026#x27;send-name-form\u0026#x27;);\n  expect(form).toBeTruthy();\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can use screen.debug(form) to see the output of form in console.\u003c/p\u003e","structured_body":{"blocks":[{"key":"es3hn","text":"One of the most common queries in React Testing Library is getByTestId. It looks for elements that match provided data-testid in your component. We will start with creating very dummy test, which asserts form is present in the component.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{"entityRefreshHax":1}},{"key":"1ecrc","text":"it('should render form', () =\u003e {\n  render(\u003cComponent /\u003e);\n\n  const form = screen.getByTestId('send-name-form');\n  expect(form).toBeTruthy();\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fdj2r","text":"You can use screen.debug(form) to see the output of form in console.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{},"allow_comments":false},"draft_attributes":{"type":"slide","answers":[],"title":"Using first query","body":null,"serialized_body":"\u003cp\u003eOne of the most common queries in React Testing Library is getByTestId. It looks for elements that match provided data-testid in your component. We will start with creating very dummy test, which asserts form is present in the component.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should render form\u0026#x27;, () =\u0026gt; {\n  render(\u0026lt;Component /\u0026gt;);\n\n  const form = screen.getByTestId(\u0026#x27;send-name-form\u0026#x27;);\n  expect(form).toBeTruthy();\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can use screen.debug(form) to see the output of form in console.\u003c/p\u003e","structured_body":{"blocks":[{"key":"es3hn","text":"One of the most common queries in React Testing Library is getByTestId. It looks for elements that match provided data-testid in your component. We will start with creating very dummy test, which asserts form is present in the component.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{"entityRefreshHax":1}},{"key":"1ecrc","text":"it('should render form', () =\u003e {\n  render(\u003cComponent /\u003e);\n\n  const form = screen.getByTestId('send-name-form');\n  expect(form).toBeTruthy();\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fdj2r","text":"You can use screen.debug(form) to see the output of form in console.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{},"allow_comments":false},"published_at":"2021-01-18T11:55:05.332+01:00","estimated_time":1,"attachments_count":1,"presentable":true,"external_id":null,"attachments":[{"id":1761,"notorious_id":"m-5YXrwj62wQXefm4BWA7WGtibGHphxZg6","location":"https://s3-eu-west-1.amazonaws.com/bridge-learn-file-store-prod-dub/512/1/uploads/4b2119d1-98be-461a-85fc-85bbfb741f6e.mp4","duration":47,"name":"1. Using first query.mp4","learner_visible":true,"confirmed":false,"user_id":457,"context_type":"Slide","content_type":"video/mp4","file_modified_at":null,"availability":"complete","media":{"name":"4b2119d1-98be-461a-85fc-85bbfb741f6e.mp4","links":{},"status":"complete","sources":[],"duration":47.636},"migrated_at":"2021-06-17T17:22:27.000+02:00","sources":[{"job_id":"m-5YXrwj62wQXefm4BWA7WGtibGHphxZg6","status":"complete","mime_type":"video/mp4","target":"web","definition":"highest","location":"transcodings/30f773bc-16e5-499d-bbda-8d77468897e2/1761"},{"job_id":"m-5YXrwj62wQXefm4BWA7WGtibGHphxZg6","status":"complete","mime_type":"video/mp4","target":"web","definition":"high","location":"transcodings/30f773bc-16e5-499d-bbda-8d77468897e2/1761"},{"job_id":"m-5YXrwj62wQXefm4BWA7WGtibGHphxZg6","status":"complete","mime_type":"video/mp4","target":"web","definition":"standard","location":"transcodings/30f773bc-16e5-499d-bbda-8d77468897e2/1761"},{"job_id":"m-5YXrwj62wQXefm4BWA7WGtibGHphxZg6","status":"complete","mime_type":"video/mp4","target":"web","definition":"low","location":"transcodings/30f773bc-16e5-499d-bbda-8d77468897e2/1761"}]}]},{"id":754,"position":3,"new_position":3,"published_attributes":{"type":"slide","answers":[],"title":"Types of Queries","body":null,"serialized_body":"\u003cp\u003eQueries in React Testing Library are divided into six categories.\u003c/p\u003e\u003cul\u003e\u003cli\u003egetBy* - returns the first matching element and throw an error if no elements match\u003c/li\u003e\u003cli\u003egetAllBy* - similar to above but returns all elements in an array\u003c/li\u003e\u003cli\u003equeryBy* - returns the first matching element, if no elements match returns null\u003c/li\u003e\u003cli\u003equeryAllBy* - returns all matching elements in an array, if no elements match returns []\u003c/li\u003e\u003cli\u003efindBy* - returns a promise which resolves when element is found, it waits 1000ms for element and rejects a promise when none is found\u003c/li\u003e\u003cli\u003efindAllBy* - similar to above, but resolves to an array of elements\u003c/li\u003e\u003c/ul\u003e\u003cimg src=\"https://cdn.dub.bridgeapp.com/512/1/uploads/c5f457c2-0ff1-41a2-8d1c-a988dffa9709.png?response-content-disposition=attachment%3Bfilename%3DUntitled+%285%29.png\u0026amp;Expires=1606325470\u0026amp;Signature=CUQgHBz9yuB8JFQZYkTStUcV3fSn19XD-u8zsSpqyyy3gX5p9sDNJBxlTkNuKYhNssCzSNMTohTL25i6xSi~FhNi9oWTaiGZPaCjvBtaqn4vMBQP7xszxPRMfTK~QXXSueErpFvHkmjmiZteWouccNxUnPFpb489CZs0zc8UI~pabuyFPqY3tqee9sGwFexSX4mDsyRBm46Cv0pKYq4clJBcfUGwrQDbSygFq8QrRP3VILuHxWrnIlJAaSz-hXM1FXL1BiHdn0~Uw6blrN~-u6lM8zb59VuZlAHMkvUx4xBBSOrBLav1wOseDcL3TkcbFUv4LJRWCRTlQYnLYt-7SA__\u0026amp;Key-Pair-Id=APKAJXAC3ZZLINBJN2EQ\"/\u003e\u003cp\u003e\nThe most popular queries you will see in projects are ByTestId, ByText, ByLabelText\u003c/p\u003e\u003cp\u003eAll queries are described in the documentation: \u003ca href=\"https://testing-library.com/docs/dom-testing-library/api-queries#queries\" target=\"_blank\"\u003ehttps://testing-library.com/docs/dom-testing-library/api-queries#queries\u003c/a\u003e.\u003c/p\u003e","structured_body":{"blocks":[{"key":"dpsb7","text":"Queries in React Testing Library are divided into six categories.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{"entityRefreshHax":1}},{"key":"f99uu","text":"getBy* - returns the first matching element and throw an error if no elements match","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"b5qk8","text":"getAllBy* - similar to above but returns all elements in an array","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9r35b","text":"queryBy* - returns the first matching element, if no elements match returns null","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9k4gh","text":"queryAllBy* - returns all matching elements in an array, if no elements match returns []","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fou0d","text":"findBy* - returns a promise which resolves when element is found, it waits 1000ms for element and rejects a promise when none is found","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"32qcq","text":"findAllBy* - similar to above, but resolves to an array of elements","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fo9q2","text":" ","type":"atomic","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":0,"length":1,"key":0}],"data":{}},{"key":"fehd","text":"\nThe most popular queries you will see in projects are ByTestId, ByText, ByLabelText","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1e0f","text":"All queries are described in the documentation: https://testing-library.com/docs/dom-testing-library/api-queries#queries.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":48,"length":72,"key":1}],"data":{}}],"entityMap":{"0":{"type":"image","mutability":"IMMUTABLE","data":{"uploadId":null,"src":"https://cdn.dub.bridgeapp.com/512/1/uploads/c5f457c2-0ff1-41a2-8d1c-a988dffa9709.png?response-content-disposition=attachment%3Bfilename%3DUntitled+%285%29.png\u0026Expires=1606325470\u0026Signature=CUQgHBz9yuB8JFQZYkTStUcV3fSn19XD-u8zsSpqyyy3gX5p9sDNJBxlTkNuKYhNssCzSNMTohTL25i6xSi~FhNi9oWTaiGZPaCjvBtaqn4vMBQP7xszxPRMfTK~QXXSueErpFvHkmjmiZteWouccNxUnPFpb489CZs0zc8UI~pabuyFPqY3tqee9sGwFexSX4mDsyRBm46Cv0pKYq4clJBcfUGwrQDbSygFq8QrRP3VILuHxWrnIlJAaSz-hXM1FXL1BiHdn0~Uw6blrN~-u6lM8zb59VuZlAHMkvUx4xBBSOrBLav1wOseDcL3TkcbFUv4LJRWCRTlQYnLYt-7SA__\u0026Key-Pair-Id=APKAJXAC3ZZLINBJN2EQ","attachmentId":"1741"}},"1":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://testing-library.com/docs/dom-testing-library/api-queries#queries","target":"_blank","url":"https://testing-library.com/docs/dom-testing-library/api-queries#queries"}}}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Types of Queries","body":null,"serialized_body":"\u003cp\u003eQueries in React Testing Library are divided into six categories.\u003c/p\u003e\u003cul\u003e\u003cli\u003egetBy* - returns the first matching element and throw an error if no elements match\u003c/li\u003e\u003cli\u003egetAllBy* - similar to above but returns all elements in an array\u003c/li\u003e\u003cli\u003equeryBy* - returns the first matching element, if no elements match returns null\u003c/li\u003e\u003cli\u003equeryAllBy* - returns all matching elements in an array, if no elements match returns []\u003c/li\u003e\u003cli\u003efindBy* - returns a promise which resolves when element is found, it waits 1000ms for element and rejects a promise when none is found\u003c/li\u003e\u003cli\u003efindAllBy* - similar to above, but resolves to an array of elements\u003c/li\u003e\u003c/ul\u003e\u003cimg src=\"https://cdn.dub.bridgeapp.com/512/1/uploads/c5f457c2-0ff1-41a2-8d1c-a988dffa9709.png?response-content-disposition=attachment%3Bfilename%3DUntitled+%285%29.png\u0026amp;Expires=1606325470\u0026amp;Signature=CUQgHBz9yuB8JFQZYkTStUcV3fSn19XD-u8zsSpqyyy3gX5p9sDNJBxlTkNuKYhNssCzSNMTohTL25i6xSi~FhNi9oWTaiGZPaCjvBtaqn4vMBQP7xszxPRMfTK~QXXSueErpFvHkmjmiZteWouccNxUnPFpb489CZs0zc8UI~pabuyFPqY3tqee9sGwFexSX4mDsyRBm46Cv0pKYq4clJBcfUGwrQDbSygFq8QrRP3VILuHxWrnIlJAaSz-hXM1FXL1BiHdn0~Uw6blrN~-u6lM8zb59VuZlAHMkvUx4xBBSOrBLav1wOseDcL3TkcbFUv4LJRWCRTlQYnLYt-7SA__\u0026amp;Key-Pair-Id=APKAJXAC3ZZLINBJN2EQ\"/\u003e\u003cp\u003e\nThe most popular queries you will see in projects are ByTestId, ByText, ByLabelText\u003c/p\u003e\u003cp\u003eAll queries are described in the documentation: \u003ca href=\"https://testing-library.com/docs/dom-testing-library/api-queries#queries\" target=\"_blank\"\u003ehttps://testing-library.com/docs/dom-testing-library/api-queries#queries\u003c/a\u003e.\u003c/p\u003e","structured_body":{"blocks":[{"key":"dpsb7","text":"Queries in React Testing Library are divided into six categories.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{"entityRefreshHax":1}},{"key":"f99uu","text":"getBy* - returns the first matching element and throw an error if no elements match","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"b5qk8","text":"getAllBy* - similar to above but returns all elements in an array","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9r35b","text":"queryBy* - returns the first matching element, if no elements match returns null","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9k4gh","text":"queryAllBy* - returns all matching elements in an array, if no elements match returns []","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fou0d","text":"findBy* - returns a promise which resolves when element is found, it waits 1000ms for element and rejects a promise when none is found","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"32qcq","text":"findAllBy* - similar to above, but resolves to an array of elements","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fo9q2","text":" ","type":"atomic","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":0,"length":1,"key":0}],"data":{}},{"key":"fehd","text":"\nThe most popular queries you will see in projects are ByTestId, ByText, ByLabelText","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1e0f","text":"All queries are described in the documentation: https://testing-library.com/docs/dom-testing-library/api-queries#queries.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":48,"length":72,"key":1}],"data":{}}],"entityMap":{"0":{"type":"image","mutability":"IMMUTABLE","data":{"uploadId":null,"src":"https://cdn.dub.bridgeapp.com/512/1/uploads/c5f457c2-0ff1-41a2-8d1c-a988dffa9709.png?response-content-disposition=attachment%3Bfilename%3DUntitled+%285%29.png\u0026Expires=1606325470\u0026Signature=CUQgHBz9yuB8JFQZYkTStUcV3fSn19XD-u8zsSpqyyy3gX5p9sDNJBxlTkNuKYhNssCzSNMTohTL25i6xSi~FhNi9oWTaiGZPaCjvBtaqn4vMBQP7xszxPRMfTK~QXXSueErpFvHkmjmiZteWouccNxUnPFpb489CZs0zc8UI~pabuyFPqY3tqee9sGwFexSX4mDsyRBm46Cv0pKYq4clJBcfUGwrQDbSygFq8QrRP3VILuHxWrnIlJAaSz-hXM1FXL1BiHdn0~Uw6blrN~-u6lM8zb59VuZlAHMkvUx4xBBSOrBLav1wOseDcL3TkcbFUv4LJRWCRTlQYnLYt-7SA__\u0026Key-Pair-Id=APKAJXAC3ZZLINBJN2EQ","attachmentId":"1741"}},"1":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://testing-library.com/docs/dom-testing-library/api-queries#queries","target":"_blank","url":"https://testing-library.com/docs/dom-testing-library/api-queries#queries"}}}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:55:05.332+01:00","estimated_time":1,"attachments_count":1,"presentable":true,"external_id":null,"attachments":[{"id":1741,"notorious_id":null,"location":"https://s3-eu-west-1.amazonaws.com/bridge-learn-file-store-prod-dub/512/1/uploads/c5f457c2-0ff1-41a2-8d1c-a988dffa9709.png","duration":null,"name":"Untitled (5).png","learner_visible":true,"confirmed":false,"user_id":457,"context_type":"Slide","content_type":"image/png","file_modified_at":null,"availability":"complete","media":null,"migrated_at":null,"sources":[]}]},{"id":755,"position":4,"new_position":4,"published_attributes":{"type":"slide","answers":[],"title":"Queries in action","body":null,"serialized_body":"\u003cp\u003eNow let\u0026#x27;s use some queries to test our simple component.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should render form\u0026#x27;, () =\u0026gt; {\n  render(\u0026lt;Component /\u0026gt;);\n\n  const form = screen.getByTestId(\u0026#x27;send-name-form\u0026#x27;);\n  expect(form).toBeTruthy();\n});\n\nit(\u0026#x27;should render name input\u0026#x27;, () =\u0026gt; {\n  render(\u0026lt;Component /\u0026gt;);\n\n  const input = screen.getByLabelText(/name/i);\n  expect(input).toBeTruthy();\n});\n\nit(\u0026#x27;should render send button\u0026#x27;, () =\u0026gt; {\n  render(\u0026lt;Component /\u0026gt;);\n\n  const sendButton = screen.getByText(/send/i);\n  expect(sendButton).toBeTruthy();\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf you run those tests you will see the last one failing.\u003c/p\u003e\u003cp\u003escreen.getByText(/send/i); found two matching elements: heading and button. We could add data-testid to this button, but there is other solution.\u003c/p\u003e","structured_body":{"blocks":[{"key":"2d53r","text":"Now let's use some queries to test our simple component.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"qes6","text":"it('should render form', () =\u003e {\n  render(\u003cComponent /\u003e);\n\n  const form = screen.getByTestId('send-name-form');\n  expect(form).toBeTruthy();\n});\n\nit('should render name input', () =\u003e {\n  render(\u003cComponent /\u003e);\n\n  const input = screen.getByLabelText(/name/i);\n  expect(input).toBeTruthy();\n});\n\nit('should render send button', () =\u003e {\n  render(\u003cComponent /\u003e);\n\n  const sendButton = screen.getByText(/send/i);\n  expect(sendButton).toBeTruthy();\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4fdfu","text":"If you run those tests you will see the last one failing.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"b2t21","text":"screen.getByText(/send/i); found two matching elements: heading and button. We could add data-testid to this button, but there is other solution.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Queries in action","body":null,"serialized_body":"\u003cp\u003eNow let\u0026#x27;s use some queries to test our simple component.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should render form\u0026#x27;, () =\u0026gt; {\n  render(\u0026lt;Component /\u0026gt;);\n\n  const form = screen.getByTestId(\u0026#x27;send-name-form\u0026#x27;);\n  expect(form).toBeTruthy();\n});\n\nit(\u0026#x27;should render name input\u0026#x27;, () =\u0026gt; {\n  render(\u0026lt;Component /\u0026gt;);\n\n  const input = screen.getByLabelText(/name/i);\n  expect(input).toBeTruthy();\n});\n\nit(\u0026#x27;should render send button\u0026#x27;, () =\u0026gt; {\n  render(\u0026lt;Component /\u0026gt;);\n\n  const sendButton = screen.getByText(/send/i);\n  expect(sendButton).toBeTruthy();\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf you run those tests you will see the last one failing.\u003c/p\u003e\u003cp\u003escreen.getByText(/send/i); found two matching elements: heading and button. We could add data-testid to this button, but there is other solution.\u003c/p\u003e","structured_body":{"blocks":[{"key":"2d53r","text":"Now let's use some queries to test our simple component.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"qes6","text":"it('should render form', () =\u003e {\n  render(\u003cComponent /\u003e);\n\n  const form = screen.getByTestId('send-name-form');\n  expect(form).toBeTruthy();\n});\n\nit('should render name input', () =\u003e {\n  render(\u003cComponent /\u003e);\n\n  const input = screen.getByLabelText(/name/i);\n  expect(input).toBeTruthy();\n});\n\nit('should render send button', () =\u003e {\n  render(\u003cComponent /\u003e);\n\n  const sendButton = screen.getByText(/send/i);\n  expect(sendButton).toBeTruthy();\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4fdfu","text":"If you run those tests you will see the last one failing.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"b2t21","text":"screen.getByText(/send/i); found two matching elements: heading and button. We could add data-testid to this button, but there is other solution.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:55:05.332+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":756,"position":5,"new_position":5,"published_attributes":{"type":"slide","answers":[],"title":"Searching for element within other element","body":null,"serialized_body":"\u003cp\u003eWe will look for element with send text only within the form.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { render, screen, getByText } from \u0026#x27;@testing-library/react\u0026#x27;;\n\nit(\u0026#x27;should render send button\u0026#x27;, () =\u0026gt; {\n  render(\u0026lt;Component /\u0026gt;);\n\n  const form = screen.getByTestId(\u0026#x27;send-name-form\u0026#x27;);\n  const sendButton = getByText(form, /send/i);\n  expect(sendButton).toBeTruthy();\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003egetByText imported from @testing-library/react has slightly different API. As first argument it takes container. It will look for elements within provided container, in our case it\u0026#x27;s a form.\n\u003c/p\u003e","structured_body":{"blocks":[{"key":"f993m","text":"We will look for element with send text only within the form.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"45hii","text":"import { render, screen, getByText } from '@testing-library/react';\n\nit('should render send button', () =\u003e {\n  render(\u003cComponent /\u003e);\n\n  const form = screen.getByTestId('send-name-form');\n  const sendButton = getByText(form, /send/i);\n  expect(sendButton).toBeTruthy();\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bdao7","text":"getByText imported from @testing-library/react has slightly different API. As first argument it takes container. It will look for elements within provided container, in our case it's a form.\n","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Searching for element within other element","body":null,"serialized_body":"\u003cp\u003eWe will look for element with send text only within the form.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { render, screen, getByText } from \u0026#x27;@testing-library/react\u0026#x27;;\n\nit(\u0026#x27;should render send button\u0026#x27;, () =\u0026gt; {\n  render(\u0026lt;Component /\u0026gt;);\n\n  const form = screen.getByTestId(\u0026#x27;send-name-form\u0026#x27;);\n  const sendButton = getByText(form, /send/i);\n  expect(sendButton).toBeTruthy();\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003egetByText imported from @testing-library/react has slightly different API. As first argument it takes container. It will look for elements within provided container, in our case it\u0026#x27;s a form.\n\u003c/p\u003e","structured_body":{"blocks":[{"key":"f993m","text":"We will look for element with send text only within the form.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"45hii","text":"import { render, screen, getByText } from '@testing-library/react';\n\nit('should render send button', () =\u003e {\n  render(\u003cComponent /\u003e);\n\n  const form = screen.getByTestId('send-name-form');\n  const sendButton = getByText(form, /send/i);\n  expect(sendButton).toBeTruthy();\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bdao7","text":"getByText imported from @testing-library/react has slightly different API. As first argument it takes container. It will look for elements within provided container, in our case it's a form.\n","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:55:05.332+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":757,"position":6,"new_position":6,"published_attributes":{"type":"slide","answers":[],"title":"Final code","body":null,"serialized_body":"\u003cp\u003eThe final code looks like this:\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { render, screen, getByText } from \u0026#x27;@testing-library/react\u0026#x27;;\n\nimport Component from \u0026#x27;./Component\u0026#x27;;\n\ndescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should render form\u0026#x27;, () =\u0026gt; {\n    render(\u0026lt;Component /\u0026gt;);\n\n    const form = screen.getByTestId(\u0026#x27;send-name-form\u0026#x27;);\n    expect(form).toBeTruthy();\n  });\n\n  it(\u0026#x27;should render name input\u0026#x27;, () =\u0026gt; {\n    render(\u0026lt;Component /\u0026gt;);\n\n    const input = screen.getByLabelText(/name/i);\n    expect(input).toBeTruthy();\n  });\n\n  it(\u0026#x27;should render send button\u0026#x27;, () =\u0026gt; {\n    render(\u0026lt;Component /\u0026gt;);\n\n    const form = screen.getByTestId(\u0026#x27;send-name-form\u0026#x27;);\n    const sendButton = getByText(form, /send/i);\n    expect(sendButton).toBeTruthy();\n  });\n});\n\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"8kkjj","text":"The final code looks like this:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"72o64","text":"import { render, screen, getByText } from '@testing-library/react';\n\nimport Component from './Component';\n\ndescribe('Component', () =\u003e {\n  it('should render form', () =\u003e {\n    render(\u003cComponent /\u003e);\n\n    const form = screen.getByTestId('send-name-form');\n    expect(form).toBeTruthy();\n  });\n\n  it('should render name input', () =\u003e {\n    render(\u003cComponent /\u003e);\n\n    const input = screen.getByLabelText(/name/i);\n    expect(input).toBeTruthy();\n  });\n\n  it('should render send button', () =\u003e {\n    render(\u003cComponent /\u003e);\n\n    const form = screen.getByTestId('send-name-form');\n    const sendButton = getByText(form, /send/i);\n    expect(sendButton).toBeTruthy();\n  });\n});\n","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Final code","body":null,"serialized_body":"\u003cp\u003eThe final code looks like this:\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { render, screen, getByText } from \u0026#x27;@testing-library/react\u0026#x27;;\n\nimport Component from \u0026#x27;./Component\u0026#x27;;\n\ndescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should render form\u0026#x27;, () =\u0026gt; {\n    render(\u0026lt;Component /\u0026gt;);\n\n    const form = screen.getByTestId(\u0026#x27;send-name-form\u0026#x27;);\n    expect(form).toBeTruthy();\n  });\n\n  it(\u0026#x27;should render name input\u0026#x27;, () =\u0026gt; {\n    render(\u0026lt;Component /\u0026gt;);\n\n    const input = screen.getByLabelText(/name/i);\n    expect(input).toBeTruthy();\n  });\n\n  it(\u0026#x27;should render send button\u0026#x27;, () =\u0026gt; {\n    render(\u0026lt;Component /\u0026gt;);\n\n    const form = screen.getByTestId(\u0026#x27;send-name-form\u0026#x27;);\n    const sendButton = getByText(form, /send/i);\n    expect(sendButton).toBeTruthy();\n  });\n});\n\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"8kkjj","text":"The final code looks like this:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"72o64","text":"import { render, screen, getByText } from '@testing-library/react';\n\nimport Component from './Component';\n\ndescribe('Component', () =\u003e {\n  it('should render form', () =\u003e {\n    render(\u003cComponent /\u003e);\n\n    const form = screen.getByTestId('send-name-form');\n    expect(form).toBeTruthy();\n  });\n\n  it('should render name input', () =\u003e {\n    render(\u003cComponent /\u003e);\n\n    const input = screen.getByLabelText(/name/i);\n    expect(input).toBeTruthy();\n  });\n\n  it('should render send button', () =\u003e {\n    render(\u003cComponent /\u003e);\n\n    const form = screen.getByTestId('send-name-form');\n    const sendButton = getByText(form, /send/i);\n    expect(sendButton).toBeTruthy();\n  });\n});\n","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:55:05.332+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":758,"position":7,"new_position":7,"published_attributes":{"type":"slide","answers":[],"title":"Exercises","body":null,"serialized_body":"\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003econst Component = ({ showTitle = true, name }) =\u0026gt; (\n  \u0026lt;\u0026gt;\n    {showTitle \u0026amp;\u0026amp; \u0026lt;h2\u0026gt;Hello\u0026lt;/h2\u0026gt;}\n    \u0026lt;p\u0026gt;Your name is: {name}\u0026lt;/p\u0026gt;\n  \u0026lt;/\u0026gt;\n);\n\nexport default Component;\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eUse the component above and write following tests:\u003c/p\u003e\u003cul\u003e\u003cli\u003eit should show title by default\u003c/li\u003e\u003cli\u003eit should show name provided in props\u003c/li\u003e\u003cli\u003eit should not show title if showTitle is set to false (look at the list of queries to find the correct one)\u003c/li\u003e\u003c/ul\u003e","structured_body":{"blocks":[{"key":"8t2hi","text":"const Component = ({ showTitle = true, name }) =\u003e (\n  \u003c\u003e\n    {showTitle \u0026\u0026 \u003ch2\u003eHello\u003c/h2\u003e}\n    \u003cp\u003eYour name is: {name}\u003c/p\u003e\n  \u003c/\u003e\n);\n\nexport default Component;\n\n","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"d09ns","text":"Use the component above and write following tests:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"16q22","text":"it should show title by default","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8gdf8","text":"it should show name provided in props","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4oqvl","text":"it should not show title if showTitle is set to false (look at the list of queries to find the correct one)","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Exercises","body":null,"serialized_body":"\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003econst Component = ({ showTitle = true, name }) =\u0026gt; (\n  \u0026lt;\u0026gt;\n    {showTitle \u0026amp;\u0026amp; \u0026lt;h2\u0026gt;Hello\u0026lt;/h2\u0026gt;}\n    \u0026lt;p\u0026gt;Your name is: {name}\u0026lt;/p\u0026gt;\n  \u0026lt;/\u0026gt;\n);\n\nexport default Component;\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eUse the component above and write following tests:\u003c/p\u003e\u003cul\u003e\u003cli\u003eit should show title by default\u003c/li\u003e\u003cli\u003eit should show name provided in props\u003c/li\u003e\u003cli\u003eit should not show title if showTitle is set to false (look at the list of queries to find the correct one)\u003c/li\u003e\u003c/ul\u003e","structured_body":{"blocks":[{"key":"8t2hi","text":"const Component = ({ showTitle = true, name }) =\u003e (\n  \u003c\u003e\n    {showTitle \u0026\u0026 \u003ch2\u003eHello\u003c/h2\u003e}\n    \u003cp\u003eYour name is: {name}\u003c/p\u003e\n  \u003c/\u003e\n);\n\nexport default Component;\n\n","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"d09ns","text":"Use the component above and write following tests:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"16q22","text":"it should show title by default","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8gdf8","text":"it should show name provided in props","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4oqvl","text":"it should not show title if showTitle is set to false (look at the list of queries to find the correct one)","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:55:05.332+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]}],"attachments":[]}