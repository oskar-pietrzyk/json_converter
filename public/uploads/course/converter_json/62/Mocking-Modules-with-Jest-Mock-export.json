{"id":81,"title":"Mocking Modules with Jest Mock","estimated_time":14,"user_id":null,"passing_threshold":80,"published_at":"2021-01-18T11:54:46.917+01:00","has_unpublished_changes":false,"has_certificate":false,"external_id":null,"draft_external_id":null,"external_status":"inapplicable","course_type":"bridge","enrollments_count":6,"domain_id":1,"sub_account_id":1,"open_book":null,"description":null,"third_party_course_id":null,"external_course_id":null,"quizzes_count":0,"external_status_message":null,"manual_estimated_time":false,"show_correct_response":true,"max_quiz_attempts":null,"continuing_education_credits":null,"archived_at":null,"config":{},"unpublished_at":null,"external_learning_standard":null,"available_offline":false,"external_version":null,"ordered_slides":[{"id":764,"position":1,"new_position":1,"published_attributes":{"type":"slide","title":"Example of module we will mock","body":null,"serialized_body":"\u003cp\u003eTesting has its limitations. Sometimes we cannot test code as it is. We have to mock modules to assure predictable outcome of our tests.\u003c/p\u003e\u003cp\u003eLet\u0026#x27;s look at a simple example of component which behaves unpredictable in tests.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport getRandomNumber from \u0026#x27;./utils/getRandomNumber\u0026#x27;;\n\nconst Component = () =\u0026gt; \u0026lt;\u0026gt;Random number is: {getRandomNumber()}\u0026lt;/\u0026gt;;\n\nexport default Component;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd implementation of getRandomNumber is simply:\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eexport default Math.random;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI know it\u0026#x27;s not a real world example, but let\u0026#x27;s take a look how we can write a simple test for this component.\u003c/p\u003e","structured_body":{"blocks":[{"key":"92l94","text":"Testing has its limitations. Sometimes we cannot test code as it is. We have to mock modules to assure predictable outcome of our tests.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"57so7","text":"Let's look at a simple example of component which behaves unpredictable in tests.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ee11","text":"import getRandomNumber from './utils/getRandomNumber';\n\nconst Component = () =\u003e \u003c\u003eRandom number is: {getRandomNumber()}\u003c/\u003e;\n\nexport default Component;","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dcedp","text":"And implementation of getRandomNumber is simply:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"a1dpe","text":"export default Math.random;","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bvfuo","text":"I know it's not a real world example, but let's take a look how we can write a simple test for this component.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"answers":[],"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","title":"Example of module we will mock","body":null,"serialized_body":"\u003cp\u003eTesting has its limitations. Sometimes we cannot test code as it is. We have to mock modules to assure predictable outcome of our tests.\u003c/p\u003e\u003cp\u003eLet\u0026#x27;s look at a simple example of component which behaves unpredictable in tests.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport getRandomNumber from \u0026#x27;./utils/getRandomNumber\u0026#x27;;\n\nconst Component = () =\u0026gt; \u0026lt;\u0026gt;Random number is: {getRandomNumber()}\u0026lt;/\u0026gt;;\n\nexport default Component;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd implementation of getRandomNumber is simply:\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eexport default Math.random;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI know it\u0026#x27;s not a real world example, but let\u0026#x27;s take a look how we can write a simple test for this component.\u003c/p\u003e","structured_body":{"blocks":[{"key":"92l94","text":"Testing has its limitations. Sometimes we cannot test code as it is. We have to mock modules to assure predictable outcome of our tests.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"57so7","text":"Let's look at a simple example of component which behaves unpredictable in tests.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ee11","text":"import getRandomNumber from './utils/getRandomNumber';\n\nconst Component = () =\u003e \u003c\u003eRandom number is: {getRandomNumber()}\u003c/\u003e;\n\nexport default Component;","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dcedp","text":"And implementation of getRandomNumber is simply:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"a1dpe","text":"export default Math.random;","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bvfuo","text":"I know it's not a real world example, but let's take a look how we can write a simple test for this component.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"answers":[],"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:46.917+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":765,"position":2,"new_position":2,"published_attributes":{"type":"slide","answers":[],"title":"Attempt to test the component","body":null,"serialized_body":"\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { render, screen } from \u0026#x27;@testing-library/react\u0026#x27;;\n\nimport Component from \u0026#x27;./Component\u0026#x27;;\n\ndescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should render random number\u0026#x27;, () =\u0026gt; {\n    render(\u0026lt;Component /\u0026gt;);\n\n    const randomNumber = screen.getByText(/random number is: 0.5/i);\n    expect(randomNumber).toBeTruthy();\n  });\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis test will fail, because we do not know what will be the random value.\u003c/p\u003e\u003cp\u003eTo solve it we will use very powerful jest.mock function.\u003c/p\u003e","structured_body":{"blocks":[{"key":"4esi","text":"import { render, screen } from '@testing-library/react';\n\nimport Component from './Component';\n\ndescribe('Component', () =\u003e {\n  it('should render random number', () =\u003e {\n    render(\u003cComponent /\u003e);\n\n    const randomNumber = screen.getByText(/random number is: 0.5/i);\n    expect(randomNumber).toBeTruthy();\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9hqtq","text":"This test will fail, because we do not know what will be the random value.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dfsi7","text":"To solve it we will use very powerful jest.mock function.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Attempt to test the component","body":null,"serialized_body":"\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { render, screen } from \u0026#x27;@testing-library/react\u0026#x27;;\n\nimport Component from \u0026#x27;./Component\u0026#x27;;\n\ndescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should render random number\u0026#x27;, () =\u0026gt; {\n    render(\u0026lt;Component /\u0026gt;);\n\n    const randomNumber = screen.getByText(/random number is: 0.5/i);\n    expect(randomNumber).toBeTruthy();\n  });\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis test will fail, because we do not know what will be the random value.\u003c/p\u003e\u003cp\u003eTo solve it we will use very powerful jest.mock function.\u003c/p\u003e","structured_body":{"blocks":[{"key":"4esi","text":"import { render, screen } from '@testing-library/react';\n\nimport Component from './Component';\n\ndescribe('Component', () =\u003e {\n  it('should render random number', () =\u003e {\n    render(\u003cComponent /\u003e);\n\n    const randomNumber = screen.getByText(/random number is: 0.5/i);\n    expect(randomNumber).toBeTruthy();\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9hqtq","text":"This test will fail, because we do not know what will be the random value.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dfsi7","text":"To solve it we will use very powerful jest.mock function.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:46.917+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":766,"position":3,"new_position":3,"published_attributes":{"type":"slide","answers":[],"title":"Using jest.mock to replace the implementation","body":null,"serialized_body":"\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { render, screen } from \u0026#x27;@testing-library/react\u0026#x27;;\n\nimport Component from \u0026#x27;./Component\u0026#x27;;\n\njest.mock(\u0026#x27;./utils/getRandomNumber\u0026#x27;, () =\u0026gt; {\n  return () =\u0026gt; 0.5;\n});\n\n...\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe call jest.mock with path to module we want to mock and as a second argument, a function which returns implementation of this module. In our case we replaced Math.random with () =\u0026gt; 0.5\u003c/p\u003e","structured_body":{"blocks":[{"key":"8jjvj","text":"import { render, screen } from '@testing-library/react';\n\nimport Component from './Component';\n\njest.mock('./utils/getRandomNumber', () =\u003e {\n  return () =\u003e 0.5;\n});\n\n...","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5f82t","text":"We call jest.mock with path to module we want to mock and as a second argument, a function which returns implementation of this module. In our case we replaced Math.random with () =\u003e 0.5","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Using jest.mock to replace the implementation","body":null,"serialized_body":"\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { render, screen } from \u0026#x27;@testing-library/react\u0026#x27;;\n\nimport Component from \u0026#x27;./Component\u0026#x27;;\n\njest.mock(\u0026#x27;./utils/getRandomNumber\u0026#x27;, () =\u0026gt; {\n  return () =\u0026gt; 0.5;\n});\n\n...\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe call jest.mock with path to module we want to mock and as a second argument, a function which returns implementation of this module. In our case we replaced Math.random with () =\u0026gt; 0.5\u003c/p\u003e","structured_body":{"blocks":[{"key":"8jjvj","text":"import { render, screen } from '@testing-library/react';\n\nimport Component from './Component';\n\njest.mock('./utils/getRandomNumber', () =\u003e {\n  return () =\u003e 0.5;\n});\n\n...","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5f82t","text":"We call jest.mock with path to module we want to mock and as a second argument, a function which returns implementation of this module. In our case we replaced Math.random with () =\u003e 0.5","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:46.917+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":767,"position":4,"new_position":4,"published_attributes":{"type":"slide","answers":[],"title":"Using __mocks__ directory","body":null,"serialized_body":"\u003cp\u003eIf module is used across many components and you don\u0026#x27;t want to mock its value every time, you can create mock in a separate file.\u003c/p\u003e\u003cp\u003eIn utils/__mocks__/getRandomNumber add\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eexport default () =\u0026gt; 0.5;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eJest will pick it up instead of utils/getRandomNumber during tests. But remember you still have to add jest.mock in the test.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { render, screen } from \u0026#x27;@testing-library/react\u0026#x27;;\n\nimport Component from \u0026#x27;./Component\u0026#x27;;\n\njest.mock(\u0026#x27;./utils/getRandomNumber\u0026#x27;);\n\ndescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should render random number\u0026#x27;, () =\u0026gt; {\n    render(\u0026lt;Component /\u0026gt;);\n\n    const randomNumber = screen.getByText(/random number is: 0.5/i);\n    expect(randomNumber).toBeTruthy();\n  });\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"3s6k4","text":"If module is used across many components and you don't want to mock its value every time, you can create mock in a separate file.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3ejeh","text":"In utils/__mocks__/getRandomNumber add","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5pjat","text":"export default () =\u003e 0.5;","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5uuri","text":"Jest will pick it up instead of utils/getRandomNumber during tests. But remember you still have to add jest.mock in the test.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dtbcj","text":"import { render, screen } from '@testing-library/react';\n\nimport Component from './Component';\n\njest.mock('./utils/getRandomNumber');\n\ndescribe('Component', () =\u003e {\n  it('should render random number', () =\u003e {\n    render(\u003cComponent /\u003e);\n\n    const randomNumber = screen.getByText(/random number is: 0.5/i);\n    expect(randomNumber).toBeTruthy();\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Using __mocks__ directory","body":null,"serialized_body":"\u003cp\u003eIf module is used across many components and you don\u0026#x27;t want to mock its value every time, you can create mock in a separate file.\u003c/p\u003e\u003cp\u003eIn utils/__mocks__/getRandomNumber add\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eexport default () =\u0026gt; 0.5;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eJest will pick it up instead of utils/getRandomNumber during tests. But remember you still have to add jest.mock in the test.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { render, screen } from \u0026#x27;@testing-library/react\u0026#x27;;\n\nimport Component from \u0026#x27;./Component\u0026#x27;;\n\njest.mock(\u0026#x27;./utils/getRandomNumber\u0026#x27;);\n\ndescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should render random number\u0026#x27;, () =\u0026gt; {\n    render(\u0026lt;Component /\u0026gt;);\n\n    const randomNumber = screen.getByText(/random number is: 0.5/i);\n    expect(randomNumber).toBeTruthy();\n  });\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"3s6k4","text":"If module is used across many components and you don't want to mock its value every time, you can create mock in a separate file.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3ejeh","text":"In utils/__mocks__/getRandomNumber add","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5pjat","text":"export default () =\u003e 0.5;","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5uuri","text":"Jest will pick it up instead of utils/getRandomNumber during tests. But remember you still have to add jest.mock in the test.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dtbcj","text":"import { render, screen } from '@testing-library/react';\n\nimport Component from './Component';\n\njest.mock('./utils/getRandomNumber');\n\ndescribe('Component', () =\u003e {\n  it('should render random number', () =\u003e {\n    render(\u003cComponent /\u003e);\n\n    const randomNumber = screen.getByText(/random number is: 0.5/i);\n    expect(randomNumber).toBeTruthy();\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:46.917+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":768,"position":5,"new_position":5,"published_attributes":{"type":"slide","answers":[],"title":"Creating component and tests to mock API call","body":null,"serialized_body":"\u003cp\u003eMocking API calls is probably the most popular scenario where we use mocks. Let\u0026#x27;s create a component which will use API and display returned data or error.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { useEffect, useState } from \u0026#x27;react\u0026#x27;;\nimport api from \u0026#x27;./api\u0026#x27;;\n\nconst Component = () =\u0026gt; {\n  const [data, setData] = useState();\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() =\u0026gt; {\n    api()\n      .then((res) =\u0026gt; {\n        setData(res);\n      })\n      .catch(() =\u0026gt; setHasError(true));\n  }, []);\n\n  if (hasError) {\n    return \u0026lt;\u0026gt;error!\u0026lt;/\u0026gt;;\n  }\n\n  return \u0026lt;\u0026gt;{data}\u0026lt;/\u0026gt;;\n};\n\nexport default Component;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis time let\u0026#x27;s create two tests. One to test displaying data and one for case with error.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003edescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should render data from api\u0026#x27;, async () =\u0026gt; {\n\n  });\n\n  it(\u0026#x27;should render error\u0026#x27;, async () =\u0026gt; {\n\n  });\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"7n5qb","text":"Mocking API calls is probably the most popular scenario where we use mocks. Let's create a component which will use API and display returned data or error.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ehruc","text":"import { useEffect, useState } from 'react';\nimport api from './api';\n\nconst Component = () =\u003e {\n  const [data, setData] = useState();\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() =\u003e {\n    api()\n      .then((res) =\u003e {\n        setData(res);\n      })\n      .catch(() =\u003e setHasError(true));\n  }, []);\n\n  if (hasError) {\n    return \u003c\u003eerror!\u003c/\u003e;\n  }\n\n  return \u003c\u003e{data}\u003c/\u003e;\n};\n\nexport default Component;","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"91cj6","text":"This time let's create two tests. One to test displaying data and one for case with error.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"edp8f","text":"describe('Component', () =\u003e {\n  it('should render data from api', async () =\u003e {\n\n  });\n\n  it('should render error', async () =\u003e {\n\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Creating component and tests to mock API call","body":null,"serialized_body":"\u003cp\u003eMocking API calls is probably the most popular scenario where we use mocks. Let\u0026#x27;s create a component which will use API and display returned data or error.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { useEffect, useState } from \u0026#x27;react\u0026#x27;;\nimport api from \u0026#x27;./api\u0026#x27;;\n\nconst Component = () =\u0026gt; {\n  const [data, setData] = useState();\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() =\u0026gt; {\n    api()\n      .then((res) =\u0026gt; {\n        setData(res);\n      })\n      .catch(() =\u0026gt; setHasError(true));\n  }, []);\n\n  if (hasError) {\n    return \u0026lt;\u0026gt;error!\u0026lt;/\u0026gt;;\n  }\n\n  return \u0026lt;\u0026gt;{data}\u0026lt;/\u0026gt;;\n};\n\nexport default Component;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis time let\u0026#x27;s create two tests. One to test displaying data and one for case with error.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003edescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should render data from api\u0026#x27;, async () =\u0026gt; {\n\n  });\n\n  it(\u0026#x27;should render error\u0026#x27;, async () =\u0026gt; {\n\n  });\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"7n5qb","text":"Mocking API calls is probably the most popular scenario where we use mocks. Let's create a component which will use API and display returned data or error.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ehruc","text":"import { useEffect, useState } from 'react';\nimport api from './api';\n\nconst Component = () =\u003e {\n  const [data, setData] = useState();\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() =\u003e {\n    api()\n      .then((res) =\u003e {\n        setData(res);\n      })\n      .catch(() =\u003e setHasError(true));\n  }, []);\n\n  if (hasError) {\n    return \u003c\u003eerror!\u003c/\u003e;\n  }\n\n  return \u003c\u003e{data}\u003c/\u003e;\n};\n\nexport default Component;","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"91cj6","text":"This time let's create two tests. One to test displaying data and one for case with error.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"edp8f","text":"describe('Component', () =\u003e {\n  it('should render data from api', async () =\u003e {\n\n  });\n\n  it('should render error', async () =\u003e {\n\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:46.917+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":769,"position":6,"new_position":6,"published_attributes":{"type":"slide","answers":[],"title":"Creating mocked function","body":null,"serialized_body":"\u003cp\u003eWe also have to import api and mock it.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport mockApi from \u0026#x27;./api\u0026#x27;;\n\njest.mock(\u0026#x27;./api\u0026#x27;);\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eBy adding jest.mock(\u0026#x27;./api\u0026#x27;); our module imported from \u0026#x27;./api\u0026#x27; is no longed a regular module, but a mocked function. It gives us a possibility to replace the implementation in each test.\u003c/p\u003e","structured_body":{"blocks":[{"key":"4bkom","text":"We also have to import api and mock it.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8jus7","text":"import mockApi from './api';\n\njest.mock('./api');","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2v52o","text":"By adding jest.mock('./api'); our module imported from './api' is no longed a regular module, but a mocked function. It gives us a possibility to replace the implementation in each test.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Creating mocked function","body":null,"serialized_body":"\u003cp\u003eWe also have to import api and mock it.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport mockApi from \u0026#x27;./api\u0026#x27;;\n\njest.mock(\u0026#x27;./api\u0026#x27;);\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eBy adding jest.mock(\u0026#x27;./api\u0026#x27;); our module imported from \u0026#x27;./api\u0026#x27; is no longed a regular module, but a mocked function. It gives us a possibility to replace the implementation in each test.\u003c/p\u003e","structured_body":{"blocks":[{"key":"4bkom","text":"We also have to import api and mock it.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8jus7","text":"import mockApi from './api';\n\njest.mock('./api');","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2v52o","text":"By adding jest.mock('./api'); our module imported from './api' is no longed a regular module, but a mocked function. It gives us a possibility to replace the implementation in each test.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:46.917+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":770,"position":7,"new_position":7,"published_attributes":{"type":"slide","answers":[],"title":"Using mockImplementationOnce on mocked function","body":null,"serialized_body":"\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should render data from api\u0026#x27;, async () =\u0026gt; {\n  mockApi.mockImplementationOnce(() =\u0026gt; Promise.resolve(\u0026#x27;test\u0026#x27;));\n\n  render(\u0026lt;Component /\u0026gt;);\n\n  const data = await screen.findByText(/test/i);\n  expect(data).toBeTruthy();\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe used mockApi.mockImeplemtationOnce to a function which returns a Promise resolving with value test. Then we used findByText to find our data in component.\u003c/p\u003e\u003cp\u003eNotice the findByText with await instead of regular getByText. In our component, data won\u0026#x27;t be available at first render. We need to wait for useEffect to call api and for Promise to resolve.\n\u003c/p\u003e","structured_body":{"blocks":[{"key":"6ohl7","text":"it('should render data from api', async () =\u003e {\n  mockApi.mockImplementationOnce(() =\u003e Promise.resolve('test'));\n\n  render(\u003cComponent /\u003e);\n\n  const data = await screen.findByText(/test/i);\n  expect(data).toBeTruthy();\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fladr","text":"We used mockApi.mockImeplemtationOnce to a function which returns a Promise resolving with value test. Then we used findByText to find our data in component.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"473qd","text":"Notice the findByText with await instead of regular getByText. In our component, data won't be available at first render. We need to wait for useEffect to call api and for Promise to resolve.\n","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Using mockImplementationOnce on mocked function","body":null,"serialized_body":"\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should render data from api\u0026#x27;, async () =\u0026gt; {\n  mockApi.mockImplementationOnce(() =\u0026gt; Promise.resolve(\u0026#x27;test\u0026#x27;));\n\n  render(\u0026lt;Component /\u0026gt;);\n\n  const data = await screen.findByText(/test/i);\n  expect(data).toBeTruthy();\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe used mockApi.mockImeplemtationOnce to a function which returns a Promise resolving with value test. Then we used findByText to find our data in component.\u003c/p\u003e\u003cp\u003eNotice the findByText with await instead of regular getByText. In our component, data won\u0026#x27;t be available at first render. We need to wait for useEffect to call api and for Promise to resolve.\n\u003c/p\u003e","structured_body":{"blocks":[{"key":"6ohl7","text":"it('should render data from api', async () =\u003e {\n  mockApi.mockImplementationOnce(() =\u003e Promise.resolve('test'));\n\n  render(\u003cComponent /\u003e);\n\n  const data = await screen.findByText(/test/i);\n  expect(data).toBeTruthy();\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fladr","text":"We used mockApi.mockImeplemtationOnce to a function which returns a Promise resolving with value test. Then we used findByText to find our data in component.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"473qd","text":"Notice the findByText with await instead of regular getByText. In our component, data won't be available at first render. We need to wait for useEffect to call api and for Promise to resolve.\n","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:46.917+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":771,"position":8,"new_position":8,"published_attributes":{"type":"slide","answers":[],"title":"Shorthand for Promise.resolve","body":null,"serialized_body":"\u003cp\u003eUsing mockImplementationOnce(() =\u0026gt; Promise.resolve(...)) is very common and that\u0026#x27;s why Jest offers a simpler way.\u003c/p\u003e\u003cp\u003eYou can use mockResolvedValueOnce, in our case - mockApi.mockResolvedValueOnce(\u0026#x27;test\u0026#x27;);.\u003c/p\u003e","structured_body":{"blocks":[{"key":"ckm69","text":"Using mockImplementationOnce(() =\u003e Promise.resolve(...)) is very common and that's why Jest offers a simpler way.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fu5gl","text":"You can use mockResolvedValueOnce, in our case - mockApi.mockResolvedValueOnce('test');.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Shorthand for Promise.resolve","body":null,"serialized_body":"\u003cp\u003eUsing mockImplementationOnce(() =\u0026gt; Promise.resolve(...)) is very common and that\u0026#x27;s why Jest offers a simpler way.\u003c/p\u003e\u003cp\u003eYou can use mockResolvedValueOnce, in our case - mockApi.mockResolvedValueOnce(\u0026#x27;test\u0026#x27;);.\u003c/p\u003e","structured_body":{"blocks":[{"key":"ckm69","text":"Using mockImplementationOnce(() =\u003e Promise.resolve(...)) is very common and that's why Jest offers a simpler way.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fu5gl","text":"You can use mockResolvedValueOnce, in our case - mockApi.mockResolvedValueOnce('test');.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:46.917+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":772,"position":9,"new_position":9,"published_attributes":{"type":"slide","answers":[],"title":"Testing displaying the error","body":null,"serialized_body":"\u003cp\u003eNow let\u0026#x27;s take a look at the second case with error handling. Similar to the test with resolved value we could use Promise.reject, but it is already implemented as mockRejectedValueOnce.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should render error\u0026#x27;, async () =\u0026gt; {\n  mockApi.mockRejectedValueOnce();\n\n  render(\u0026lt;Component /\u0026gt;);\n\n  const error = await screen.findByText(/error!/i);\n  expect(error).toBeTruthy();\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can find more useful methods for dealing with mocked function in the \u003ca href=\"https://jestjs.io/docs/en/mock-function-api\" target=\"_blank\"\u003edocumentation\u003c/a\u003e.\u003c/p\u003e","structured_body":{"blocks":[{"key":"1gom6","text":"Now let's take a look at the second case with error handling. Similar to the test with resolved value we could use Promise.reject, but it is already implemented as mockRejectedValueOnce.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"b20hj","text":"it('should render error', async () =\u003e {\n  mockApi.mockRejectedValueOnce();\n\n  render(\u003cComponent /\u003e);\n\n  const error = await screen.findByText(/error!/i);\n  expect(error).toBeTruthy();\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2s3pi","text":"You can find more useful methods for dealing with mocked function in the documentation.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":73,"length":13,"key":0}],"data":{}}],"entityMap":{"0":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://jestjs.io/docs/en/mock-function-api","target":"_blank","url":"https://jestjs.io/docs/en/mock-function-api"}}}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Testing displaying the error","body":null,"serialized_body":"\u003cp\u003eNow let\u0026#x27;s take a look at the second case with error handling. Similar to the test with resolved value we could use Promise.reject, but it is already implemented as mockRejectedValueOnce.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should render error\u0026#x27;, async () =\u0026gt; {\n  mockApi.mockRejectedValueOnce();\n\n  render(\u0026lt;Component /\u0026gt;);\n\n  const error = await screen.findByText(/error!/i);\n  expect(error).toBeTruthy();\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can find more useful methods for dealing with mocked function in the \u003ca href=\"https://jestjs.io/docs/en/mock-function-api\" target=\"_blank\"\u003edocumentation\u003c/a\u003e.\u003c/p\u003e","structured_body":{"blocks":[{"key":"1gom6","text":"Now let's take a look at the second case with error handling. Similar to the test with resolved value we could use Promise.reject, but it is already implemented as mockRejectedValueOnce.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"b20hj","text":"it('should render error', async () =\u003e {\n  mockApi.mockRejectedValueOnce();\n\n  render(\u003cComponent /\u003e);\n\n  const error = await screen.findByText(/error!/i);\n  expect(error).toBeTruthy();\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2s3pi","text":"You can find more useful methods for dealing with mocked function in the documentation.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":73,"length":13,"key":0}],"data":{}}],"entityMap":{"0":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://jestjs.io/docs/en/mock-function-api","target":"_blank","url":"https://jestjs.io/docs/en/mock-function-api"}}}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:46.917+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":773,"position":10,"new_position":10,"published_attributes":{"type":"slide","answers":[],"title":"Preparing component to mock with dependency injection","body":null,"serialized_body":"\u003cp\u003eThere is an alternative way to mock functions used in component. We can use dependency injection to help us with it.We will use props to inject api function into component. Let\u0026#x27;s modify our component first.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport apiModule from \u0026#x27;./api\u0026#x27;;\n\nconst Component = ({ api = apiModule }) =\u0026gt; {\n...\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe added default value for api prop so we don\u0026#x27;t have to provide it when we use this component outside of tests.\u003c/p\u003e","structured_body":{"blocks":[{"key":"8928o","text":"There is an alternative way to mock functions used in component. We can use dependency injection to help us with it.We will use props to inject api function into component. Let's modify our component first.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7cllp","text":"import apiModule from './api';\n\nconst Component = ({ api = apiModule }) =\u003e {\n...","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8r3ma","text":"We added default value for api prop so we don't have to provide it when we use this component outside of tests.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Preparing component to mock with dependency injection","body":null,"serialized_body":"\u003cp\u003eThere is an alternative way to mock functions used in component. We can use dependency injection to help us with it.We will use props to inject api function into component. Let\u0026#x27;s modify our component first.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport apiModule from \u0026#x27;./api\u0026#x27;;\n\nconst Component = ({ api = apiModule }) =\u0026gt; {\n...\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe added default value for api prop so we don\u0026#x27;t have to provide it when we use this component outside of tests.\u003c/p\u003e","structured_body":{"blocks":[{"key":"8928o","text":"There is an alternative way to mock functions used in component. We can use dependency injection to help us with it.We will use props to inject api function into component. Let's modify our component first.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7cllp","text":"import apiModule from './api';\n\nconst Component = ({ api = apiModule }) =\u003e {\n...","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8r3ma","text":"We added default value for api prop so we don't have to provide it when we use this component outside of tests.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:46.917+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":774,"position":11,"new_position":11,"published_attributes":{"type":"slide","answers":[],"title":"Mocking using dependency injection","body":null,"serialized_body":"\u003cp\u003eNow in tests we will remove jest.mock(\u0026#x27;./api\u0026#x27;) and instead create a mocked function by const mockApi = jest.fn().At the end we will inject it to component render(\u0026lt;Component api={mockApi} /\u0026gt;) to replace the original implementation.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003edescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should render data from api\u0026#x27;, async () =\u0026gt; {\n    const mockApi = jest.fn();\n    mockApi.mockResolvedValueOnce(\u0026#x27;test\u0026#x27;);\n\n    render(\u0026lt;Component api={mockApi} /\u0026gt;);\n\n    const data = await screen.findByText(/test/i);\n    expect(data).toBeTruthy();\n  });\n\n  it(\u0026#x27;should render error\u0026#x27;, async () =\u0026gt; {\n    const mockApi = jest.fn();\n    mockApi.mockRejectedValueOnce();\n\n    render(\u0026lt;Component api={mockApi} /\u0026gt;);\n\n    const error = await screen.findByText(/error!/i);\n    expect(error).toBeTruthy();\n  });\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"ffueo","text":"Now in tests we will remove jest.mock('./api') and instead create a mocked function by const mockApi = jest.fn().At the end we will inject it to component render(\u003cComponent api={mockApi} /\u003e) to replace the original implementation.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fsoi5","text":"describe('Component', () =\u003e {\n  it('should render data from api', async () =\u003e {\n    const mockApi = jest.fn();\n    mockApi.mockResolvedValueOnce('test');\n\n    render(\u003cComponent api={mockApi} /\u003e);\n\n    const data = await screen.findByText(/test/i);\n    expect(data).toBeTruthy();\n  });\n\n  it('should render error', async () =\u003e {\n    const mockApi = jest.fn();\n    mockApi.mockRejectedValueOnce();\n\n    render(\u003cComponent api={mockApi} /\u003e);\n\n    const error = await screen.findByText(/error!/i);\n    expect(error).toBeTruthy();\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Mocking using dependency injection","body":null,"serialized_body":"\u003cp\u003eNow in tests we will remove jest.mock(\u0026#x27;./api\u0026#x27;) and instead create a mocked function by const mockApi = jest.fn().At the end we will inject it to component render(\u0026lt;Component api={mockApi} /\u0026gt;) to replace the original implementation.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003edescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should render data from api\u0026#x27;, async () =\u0026gt; {\n    const mockApi = jest.fn();\n    mockApi.mockResolvedValueOnce(\u0026#x27;test\u0026#x27;);\n\n    render(\u0026lt;Component api={mockApi} /\u0026gt;);\n\n    const data = await screen.findByText(/test/i);\n    expect(data).toBeTruthy();\n  });\n\n  it(\u0026#x27;should render error\u0026#x27;, async () =\u0026gt; {\n    const mockApi = jest.fn();\n    mockApi.mockRejectedValueOnce();\n\n    render(\u0026lt;Component api={mockApi} /\u0026gt;);\n\n    const error = await screen.findByText(/error!/i);\n    expect(error).toBeTruthy();\n  });\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"ffueo","text":"Now in tests we will remove jest.mock('./api') and instead create a mocked function by const mockApi = jest.fn().At the end we will inject it to component render(\u003cComponent api={mockApi} /\u003e) to replace the original implementation.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fsoi5","text":"describe('Component', () =\u003e {\n  it('should render data from api', async () =\u003e {\n    const mockApi = jest.fn();\n    mockApi.mockResolvedValueOnce('test');\n\n    render(\u003cComponent api={mockApi} /\u003e);\n\n    const data = await screen.findByText(/test/i);\n    expect(data).toBeTruthy();\n  });\n\n  it('should render error', async () =\u003e {\n    const mockApi = jest.fn();\n    mockApi.mockRejectedValueOnce();\n\n    render(\u003cComponent api={mockApi} /\u003e);\n\n    const error = await screen.findByText(/error!/i);\n    expect(error).toBeTruthy();\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:46.917+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":775,"position":12,"new_position":12,"published_attributes":{"type":"slide","answers":[],"title":"Pros and cons of using dependency injection for mocks","body":null,"serialized_body":"\u003cp\u003eThe advantage of this solution is that when we change path of ./api module we don\u0026#x27;t have to adjust it in tests.\u003c/p\u003e\u003cp\u003eThe downside is that we created a new prop just for tests when in reality this prop won\u0026#x27;t be used.\u003c/p\u003e","structured_body":{"blocks":[{"key":"97sri","text":"The advantage of this solution is that when we change path of ./api module we don't have to adjust it in tests.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"enabq","text":"The downside is that we created a new prop just for tests when in reality this prop won't be used.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Pros and cons of using dependency injection for mocks","body":null,"serialized_body":"\u003cp\u003eThe advantage of this solution is that when we change path of ./api module we don\u0026#x27;t have to adjust it in tests.\u003c/p\u003e\u003cp\u003eThe downside is that we created a new prop just for tests when in reality this prop won\u0026#x27;t be used.\u003c/p\u003e","structured_body":{"blocks":[{"key":"97sri","text":"The advantage of this solution is that when we change path of ./api module we don't have to adjust it in tests.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"enabq","text":"The downside is that we created a new prop just for tests when in reality this prop won't be used.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:46.917+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":776,"position":13,"new_position":13,"published_attributes":{"type":"slide","answers":[],"title":"Exercise 1","body":null,"serialized_body":"\u003cp\u003eExtend tests we created mock mocking API calls to ensure mockApi function have been called once - you will find the useful matcher in the \u003ca href=\"https://jestjs.io/docs/en/expect\" target=\"_blank\"\u003edocumentation\u003c/a\u003e\u003c/p\u003e","structured_body":{"blocks":[{"key":"3kbr1","text":"Extend tests we created mock mocking API calls to ensure mockApi function have been called once - you will find the useful matcher in the documentation","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":138,"length":13,"key":0}],"data":{}}],"entityMap":{"0":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://jestjs.io/docs/en/expect","target":"_blank","url":"https://jestjs.io/docs/en/expect"}}}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Exercise 1","body":null,"serialized_body":"\u003cp\u003eExtend tests we created mock mocking API calls to ensure mockApi function have been called once - you will find the useful matcher in the \u003ca href=\"https://jestjs.io/docs/en/expect\" target=\"_blank\"\u003edocumentation\u003c/a\u003e\u003c/p\u003e","structured_body":{"blocks":[{"key":"3kbr1","text":"Extend tests we created mock mocking API calls to ensure mockApi function have been called once - you will find the useful matcher in the documentation","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":138,"length":13,"key":0}],"data":{}}],"entityMap":{"0":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://jestjs.io/docs/en/expect","target":"_blank","url":"https://jestjs.io/docs/en/expect"}}}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:46.917+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":777,"position":14,"new_position":14,"published_attributes":{"type":"slide","answers":[],"title":"Exercise 2","body":null,"serialized_body":"\u003cp\u003eChange component to take id as a prop and call api with the provided id - api(id)\u003c/p\u003e\u003cul\u003e\u003cli\u003etest if component calls api with provided id - you will find the matcher in the \u003ca href=\"https://jestjs.io/docs/en/expect\" target=\"_blank\"\u003edocumentation\u003c/a\u003e\u003c/li\u003e\u003cli\u003etest if component calls api again with the correct id after it was changed - you will need to use rerender function\u003c/li\u003e\u003c/ul\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003econst { rerender } = render(\u0026lt;Component api={mockApi} id={1} /\u0026gt;);\n\n...\n\nrerender(\u0026lt;Component api={mockApi} id={2} /\u0026gt;); \u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"7hlau","text":"Change component to take id as a prop and call api with the provided id - api(id)","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"10rk2","text":"test if component calls api with provided id - you will find the matcher in the documentation","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":80,"length":13,"key":0}],"data":{}},{"key":"a2a0e","text":"test if component calls api again with the correct id after it was changed - you will need to use rerender function","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"b202","text":"const { rerender } = render(\u003cComponent api={mockApi} id={1} /\u003e);\n\n...\n\nrerender(\u003cComponent api={mockApi} id={2} /\u003e); ","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{"0":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://jestjs.io/docs/en/expect","target":"_blank","url":"https://jestjs.io/docs/en/expect"}}}},"feedback":null,"cover_slide_data":{},"allow_comments":false},"draft_attributes":{"type":"slide","answers":[],"title":"Exercise 2","body":null,"serialized_body":"\u003cp\u003eChange component to take id as a prop and call api with the provided id - api(id)\u003c/p\u003e\u003cul\u003e\u003cli\u003etest if component calls api with provided id - you will find the matcher in the \u003ca href=\"https://jestjs.io/docs/en/expect\" target=\"_blank\"\u003edocumentation\u003c/a\u003e\u003c/li\u003e\u003cli\u003etest if component calls api again with the correct id after it was changed - you will need to use rerender function\u003c/li\u003e\u003c/ul\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003econst { rerender } = render(\u0026lt;Component api={mockApi} id={1} /\u0026gt;);\n\n...\n\nrerender(\u0026lt;Component api={mockApi} id={2} /\u0026gt;); \u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"7hlau","text":"Change component to take id as a prop and call api with the provided id - api(id)","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"10rk2","text":"test if component calls api with provided id - you will find the matcher in the documentation","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":80,"length":13,"key":0}],"data":{}},{"key":"a2a0e","text":"test if component calls api again with the correct id after it was changed - you will need to use rerender function","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"b202","text":"const { rerender } = render(\u003cComponent api={mockApi} id={1} /\u003e);\n\n...\n\nrerender(\u003cComponent api={mockApi} id={2} /\u003e); ","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{"0":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://jestjs.io/docs/en/expect","target":"_blank","url":"https://jestjs.io/docs/en/expect"}}}},"feedback":null,"cover_slide_data":{},"allow_comments":false},"published_at":"2021-01-18T11:54:46.917+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]}],"attachments":[]}