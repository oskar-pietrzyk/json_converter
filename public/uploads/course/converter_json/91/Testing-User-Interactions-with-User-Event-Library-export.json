{"id":84,"title":"Testing User Interactions with User Event Library","estimated_time":11,"user_id":null,"passing_threshold":80,"published_at":"2021-01-18T11:54:57.625+01:00","has_unpublished_changes":false,"has_certificate":false,"external_id":null,"draft_external_id":null,"external_status":"inapplicable","course_type":"bridge","enrollments_count":6,"domain_id":1,"sub_account_id":1,"open_book":null,"description":null,"third_party_course_id":null,"external_course_id":null,"quizzes_count":0,"external_status_message":null,"manual_estimated_time":false,"show_correct_response":true,"max_quiz_attempts":null,"continuing_education_credits":null,"archived_at":null,"config":{},"unpublished_at":null,"external_learning_standard":null,"available_offline":false,"external_version":null,"ordered_slides":[{"id":788,"position":1,"new_position":1,"published_attributes":{"type":"slide","title":"Creating component","body":null,"serialized_body":"\u003cp\u003eThe primary goal of frontend applications is to allow users to interact with our system. That\u0026#x27;s why it is especially important to ensure user can use the component we test.\u003c/p\u003e\u003cp\u003eWe will use \u003ca href=\"https://github.com/testing-library/user-event\" target=\"_blank\"\u003eUser Event library\u003c/a\u003e to help us with testing interactions.\u003c/p\u003e\u003ch2\u003e\u003cstrong\u003eCreating component and first test\u003c/strong\u003e\u003c/h2\u003e\u003cp\u003eLet\u0026#x27;s start with component we will test.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { useState } from \u0026#x27;react\u0026#x27;;\n\nconst Component = ({ text }) =\u0026gt; {\n  const [isVisible, setIsVisible] = useState(false);\n\n  return (\n    \u0026lt;\u0026gt;\n      \u0026lt;button onClick={() =\u0026gt; setIsVisible((prev) =\u0026gt; !prev)}\u0026gt;Toggle\u0026lt;/button\u0026gt;\n      {isVisible \u0026amp;\u0026amp; \u0026lt;p\u0026gt;{text}\u0026lt;/p\u0026gt;}\n    \u0026lt;/\u0026gt;\n  );\n};\n\nexport default Component;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt\u0026#x27;s a simple component which can show and hide provided text when we click on button.\u003c/p\u003e","structured_body":{"blocks":[{"key":"7ijkk","text":"The primary goal of frontend applications is to allow users to interact with our system. That's why it is especially important to ensure user can use the component we test.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"edbkh","text":"We will use User Event library to help us with testing interactions.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":12,"length":18,"key":0}],"data":{}},{"key":"c0o4f","text":"Creating component and first test","type":"header-two","depth":0,"inlineStyleRanges":[{"offset":0,"length":33,"style":"BOLD"}],"entityRanges":[],"data":{}},{"key":"65f06","text":"Let's start with component we will test.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"cbpc6","text":"import { useState } from 'react';\n\nconst Component = ({ text }) =\u003e {\n  const [isVisible, setIsVisible] = useState(false);\n\n  return (\n    \u003c\u003e\n      \u003cbutton onClick={() =\u003e setIsVisible((prev) =\u003e !prev)}\u003eToggle\u003c/button\u003e\n      {isVisible \u0026\u0026 \u003cp\u003e{text}\u003c/p\u003e}\n    \u003c/\u003e\n  );\n};\n\nexport default Component;","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fpism","text":"It's a simple component which can show and hide provided text when we click on button.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{"0":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://github.com/testing-library/user-event","target":"_blank","url":"https://github.com/testing-library/user-event"}}}},"answers":[],"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","title":"Creating component","body":null,"serialized_body":"\u003cp\u003eThe primary goal of frontend applications is to allow users to interact with our system. That\u0026#x27;s why it is especially important to ensure user can use the component we test.\u003c/p\u003e\u003cp\u003eWe will use \u003ca href=\"https://github.com/testing-library/user-event\" target=\"_blank\"\u003eUser Event library\u003c/a\u003e to help us with testing interactions.\u003c/p\u003e\u003ch2\u003e\u003cstrong\u003eCreating component and first test\u003c/strong\u003e\u003c/h2\u003e\u003cp\u003eLet\u0026#x27;s start with component we will test.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { useState } from \u0026#x27;react\u0026#x27;;\n\nconst Component = ({ text }) =\u0026gt; {\n  const [isVisible, setIsVisible] = useState(false);\n\n  return (\n    \u0026lt;\u0026gt;\n      \u0026lt;button onClick={() =\u0026gt; setIsVisible((prev) =\u0026gt; !prev)}\u0026gt;Toggle\u0026lt;/button\u0026gt;\n      {isVisible \u0026amp;\u0026amp; \u0026lt;p\u0026gt;{text}\u0026lt;/p\u0026gt;}\n    \u0026lt;/\u0026gt;\n  );\n};\n\nexport default Component;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt\u0026#x27;s a simple component which can show and hide provided text when we click on button.\u003c/p\u003e","structured_body":{"blocks":[{"key":"7ijkk","text":"The primary goal of frontend applications is to allow users to interact with our system. That's why it is especially important to ensure user can use the component we test.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"edbkh","text":"We will use User Event library to help us with testing interactions.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":12,"length":18,"key":0}],"data":{}},{"key":"c0o4f","text":"Creating component and first test","type":"header-two","depth":0,"inlineStyleRanges":[{"offset":0,"length":33,"style":"BOLD"}],"entityRanges":[],"data":{}},{"key":"65f06","text":"Let's start with component we will test.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"cbpc6","text":"import { useState } from 'react';\n\nconst Component = ({ text }) =\u003e {\n  const [isVisible, setIsVisible] = useState(false);\n\n  return (\n    \u003c\u003e\n      \u003cbutton onClick={() =\u003e setIsVisible((prev) =\u003e !prev)}\u003eToggle\u003c/button\u003e\n      {isVisible \u0026\u0026 \u003cp\u003e{text}\u003c/p\u003e}\n    \u003c/\u003e\n  );\n};\n\nexport default Component;","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fpism","text":"It's a simple component which can show and hide provided text when we click on button.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{"0":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://github.com/testing-library/user-event","target":"_blank","url":"https://github.com/testing-library/user-event"}}}},"answers":[],"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:57.625+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":789,"position":2,"new_position":2,"published_attributes":{"type":"slide","answers":[],"title":"Setting up tests","body":null,"serialized_body":"\u003cp\u003eWe will create three tests for it.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003edescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should hide text by default\u0026#x27;, () =\u0026gt; {\n\n  });\n\n  it(\u0026#x27;should show text on button click\u0026#x27;, () =\u0026gt; {\n\n  });\n\n  it(\u0026#x27;should hide text when clicking on button again\u0026#x27;, () =\u0026gt; {\n\n  });\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFirst test will be fairy simple. We will use queryByText and ensure provided text was not found in the component.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should hide text by default\u0026#x27;, () =\u0026gt; {\n  render(\u0026lt;Component text=\u0026quot;some text\u0026quot; /\u0026gt;);\n\n  const text = screen.queryByText(\u0026#x27;some text\u0026#x27;);\n  expect(text).toBeFalsy();\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"16fc0","text":"We will create three tests for it.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dotd5","text":"describe('Component', () =\u003e {\n  it('should hide text by default', () =\u003e {\n\n  });\n\n  it('should show text on button click', () =\u003e {\n\n  });\n\n  it('should hide text when clicking on button again', () =\u003e {\n\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"65dr8","text":"First test will be fairy simple. We will use queryByText and ensure provided text was not found in the component.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9643e","text":"it('should hide text by default', () =\u003e {\n  render(\u003cComponent text=\"some text\" /\u003e);\n\n  const text = screen.queryByText('some text');\n  expect(text).toBeFalsy();\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Setting up tests","body":null,"serialized_body":"\u003cp\u003eWe will create three tests for it.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003edescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should hide text by default\u0026#x27;, () =\u0026gt; {\n\n  });\n\n  it(\u0026#x27;should show text on button click\u0026#x27;, () =\u0026gt; {\n\n  });\n\n  it(\u0026#x27;should hide text when clicking on button again\u0026#x27;, () =\u0026gt; {\n\n  });\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFirst test will be fairy simple. We will use queryByText and ensure provided text was not found in the component.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should hide text by default\u0026#x27;, () =\u0026gt; {\n  render(\u0026lt;Component text=\u0026quot;some text\u0026quot; /\u0026gt;);\n\n  const text = screen.queryByText(\u0026#x27;some text\u0026#x27;);\n  expect(text).toBeFalsy();\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"16fc0","text":"We will create three tests for it.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dotd5","text":"describe('Component', () =\u003e {\n  it('should hide text by default', () =\u003e {\n\n  });\n\n  it('should show text on button click', () =\u003e {\n\n  });\n\n  it('should hide text when clicking on button again', () =\u003e {\n\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"65dr8","text":"First test will be fairy simple. We will use queryByText and ensure provided text was not found in the component.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9643e","text":"it('should hide text by default', () =\u003e {\n  render(\u003cComponent text=\"some text\" /\u003e);\n\n  const text = screen.queryByText('some text');\n  expect(text).toBeFalsy();\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:57.625+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":790,"position":3,"new_position":3,"published_attributes":{"type":"slide","answers":[],"title":"Simulate clicking on button","body":null,"serialized_body":"\u003cp\u003eNow in the second test we need the user to click on the button to show text. Let\u0026#x27;s import user-event module.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport user from \u0026#x27;@testing-library/user-event\u0026#x27;;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow we will use user.click(element) to simulate the click of real user. You can find more available user events in the \u003ca href=\"https://github.com/testing-library/user-event#api\" target=\"_blank\"\u003edocumentation\u003c/a\u003e.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should show text on click\u0026#x27;, async () =\u0026gt; {\n  render(\u0026lt;Component text=\u0026quot;some text\u0026quot; /\u0026gt;);\n\n  const toggleButton = screen.getByText(/toggle/i);\n\n  user.click(toggleButton);\n\n  const text = screen.getByText(\u0026#x27;some text\u0026#x27;);\n  expect(text).toBeTruthy();\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"99cd7","text":"Now in the second test we need the user to click on the button to show text. Let's import user-event module.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9msss","text":"import user from '@testing-library/user-event';","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"90l8r","text":"Now we will use user.click(element) to simulate the click of real user. You can find more available user events in the documentation.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":119,"length":13,"key":0}],"data":{}},{"key":"5hpt0","text":"it('should show text on click', async () =\u003e {\n  render(\u003cComponent text=\"some text\" /\u003e);\n\n  const toggleButton = screen.getByText(/toggle/i);\n\n  user.click(toggleButton);\n\n  const text = screen.getByText('some text');\n  expect(text).toBeTruthy();\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{"0":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://github.com/testing-library/user-event#api","target":"_blank","url":"https://github.com/testing-library/user-event#api"}}}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Simulate clicking on button","body":null,"serialized_body":"\u003cp\u003eNow in the second test we need the user to click on the button to show text. Let\u0026#x27;s import user-event module.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport user from \u0026#x27;@testing-library/user-event\u0026#x27;;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow we will use user.click(element) to simulate the click of real user. You can find more available user events in the \u003ca href=\"https://github.com/testing-library/user-event#api\" target=\"_blank\"\u003edocumentation\u003c/a\u003e.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should show text on click\u0026#x27;, async () =\u0026gt; {\n  render(\u0026lt;Component text=\u0026quot;some text\u0026quot; /\u0026gt;);\n\n  const toggleButton = screen.getByText(/toggle/i);\n\n  user.click(toggleButton);\n\n  const text = screen.getByText(\u0026#x27;some text\u0026#x27;);\n  expect(text).toBeTruthy();\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"99cd7","text":"Now in the second test we need the user to click on the button to show text. Let's import user-event module.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9msss","text":"import user from '@testing-library/user-event';","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"90l8r","text":"Now we will use user.click(element) to simulate the click of real user. You can find more available user events in the documentation.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":119,"length":13,"key":0}],"data":{}},{"key":"5hpt0","text":"it('should show text on click', async () =\u003e {\n  render(\u003cComponent text=\"some text\" /\u003e);\n\n  const toggleButton = screen.getByText(/toggle/i);\n\n  user.click(toggleButton);\n\n  const text = screen.getByText('some text');\n  expect(text).toBeTruthy();\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{"0":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://github.com/testing-library/user-event#api","target":"_blank","url":"https://github.com/testing-library/user-event#api"}}}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:57.625+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":791,"position":4,"new_position":4,"published_attributes":{"type":"slide","answers":[],"title":"Finishing tests","body":null,"serialized_body":"\u003cp\u003eFor the last test we will click twice on button and use the solution from first test to assert something was not rendered.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should hide text when clicking on button again\u0026#x27;, async () =\u0026gt; {\n  render(\u0026lt;Component text=\u0026quot;some text\u0026quot; /\u0026gt;);\n\n  const toggleButton = screen.getByText(/toggle/i);\n\n  user.click(toggleButton);\n  user.click(toggleButton);\n\n  const text = screen.queryByText(\u0026#x27;some text\u0026#x27;);\n  expect(text).toBeFalsy();\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"aaov2","text":"For the last test we will click twice on button and use the solution from first test to assert something was not rendered.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ce70t","text":"it('should hide text when clicking on button again', async () =\u003e {\n  render(\u003cComponent text=\"some text\" /\u003e);\n\n  const toggleButton = screen.getByText(/toggle/i);\n\n  user.click(toggleButton);\n  user.click(toggleButton);\n\n  const text = screen.queryByText('some text');\n  expect(text).toBeFalsy();\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Finishing tests","body":null,"serialized_body":"\u003cp\u003eFor the last test we will click twice on button and use the solution from first test to assert something was not rendered.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should hide text when clicking on button again\u0026#x27;, async () =\u0026gt; {\n  render(\u0026lt;Component text=\u0026quot;some text\u0026quot; /\u0026gt;);\n\n  const toggleButton = screen.getByText(/toggle/i);\n\n  user.click(toggleButton);\n  user.click(toggleButton);\n\n  const text = screen.queryByText(\u0026#x27;some text\u0026#x27;);\n  expect(text).toBeFalsy();\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"aaov2","text":"For the last test we will click twice on button and use the solution from first test to assert something was not rendered.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ce70t","text":"it('should hide text when clicking on button again', async () =\u003e {\n  render(\u003cComponent text=\"some text\" /\u003e);\n\n  const toggleButton = screen.getByText(/toggle/i);\n\n  user.click(toggleButton);\n  user.click(toggleButton);\n\n  const text = screen.queryByText('some text');\n  expect(text).toBeFalsy();\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:57.625+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":792,"position":5,"new_position":5,"published_attributes":{"type":"slide","answers":[],"title":"Creating login form component","body":null,"serialized_body":"\u003cp\u003eIn this example we will test simple login form.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { useCallback, useState } from \u0026#x27;react\u0026#x27;;\n\nconst Component = ({ onSubmit }) =\u0026gt; {\n  const [username, setUsername] = useState(\u0026#x27;\u0026#x27;);\n  const [password, setPassword] = useState(\u0026#x27;\u0026#x27;);\n\n  const handleSubmit = useCallback(\n    (e) =\u0026gt; {\n      e.preventDefault();\n      onSubmit(username, password);\n    },\n    [onSubmit, username, password]\n  );\n\n  return (\n    \u0026lt;form onSubmit={handleSubmit}\u0026gt;\n      \u0026lt;label htmlFor=\u0026quot;username\u0026quot;\u0026gt;Username\u0026lt;/label\u0026gt;\n      \u0026lt;input\n        id=\u0026quot;username\u0026quot;\n        value={username}\n        onChange={(e) =\u0026gt; setUsername(e.target.value)}\n      /\u0026gt;\n      \u0026lt;label htmlFor=\u0026quot;password\u0026quot;\u0026gt;Password\u0026lt;/label\u0026gt;\n      \u0026lt;input\n        id=\u0026quot;password\u0026quot;\n        value={password}\n        onChange={(e) =\u0026gt; setPassword(e.target.value)}\n      /\u0026gt;\n      \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt;\n    \u0026lt;/form\u0026gt;\n  );\n};\n\nexport default Component;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn this component user can type its username and password and submit the form. Component should call provided onSubmit with the input user provided.\u003c/p\u003e","structured_body":{"blocks":[{"key":"31sc7","text":"In this example we will test simple login form.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7ebo8","text":"import { useCallback, useState } from 'react';\n\nconst Component = ({ onSubmit }) =\u003e {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleSubmit = useCallback(\n    (e) =\u003e {\n      e.preventDefault();\n      onSubmit(username, password);\n    },\n    [onSubmit, username, password]\n  );\n\n  return (\n    \u003cform onSubmit={handleSubmit}\u003e\n      \u003clabel htmlFor=\"username\"\u003eUsername\u003c/label\u003e\n      \u003cinput\n        id=\"username\"\n        value={username}\n        onChange={(e) =\u003e setUsername(e.target.value)}\n      /\u003e\n      \u003clabel htmlFor=\"password\"\u003ePassword\u003c/label\u003e\n      \u003cinput\n        id=\"password\"\n        value={password}\n        onChange={(e) =\u003e setPassword(e.target.value)}\n      /\u003e\n      \u003cbutton\u003eSubmit\u003c/button\u003e\n    \u003c/form\u003e\n  );\n};\n\nexport default Component;","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dn4mj","text":"In this component user can type its username and password and submit the form. Component should call provided onSubmit with the input user provided.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Creating login form component","body":null,"serialized_body":"\u003cp\u003eIn this example we will test simple login form.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { useCallback, useState } from \u0026#x27;react\u0026#x27;;\n\nconst Component = ({ onSubmit }) =\u0026gt; {\n  const [username, setUsername] = useState(\u0026#x27;\u0026#x27;);\n  const [password, setPassword] = useState(\u0026#x27;\u0026#x27;);\n\n  const handleSubmit = useCallback(\n    (e) =\u0026gt; {\n      e.preventDefault();\n      onSubmit(username, password);\n    },\n    [onSubmit, username, password]\n  );\n\n  return (\n    \u0026lt;form onSubmit={handleSubmit}\u0026gt;\n      \u0026lt;label htmlFor=\u0026quot;username\u0026quot;\u0026gt;Username\u0026lt;/label\u0026gt;\n      \u0026lt;input\n        id=\u0026quot;username\u0026quot;\n        value={username}\n        onChange={(e) =\u0026gt; setUsername(e.target.value)}\n      /\u0026gt;\n      \u0026lt;label htmlFor=\u0026quot;password\u0026quot;\u0026gt;Password\u0026lt;/label\u0026gt;\n      \u0026lt;input\n        id=\u0026quot;password\u0026quot;\n        value={password}\n        onChange={(e) =\u0026gt; setPassword(e.target.value)}\n      /\u0026gt;\n      \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt;\n    \u0026lt;/form\u0026gt;\n  );\n};\n\nexport default Component;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn this component user can type its username and password and submit the form. Component should call provided onSubmit with the input user provided.\u003c/p\u003e","structured_body":{"blocks":[{"key":"31sc7","text":"In this example we will test simple login form.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7ebo8","text":"import { useCallback, useState } from 'react';\n\nconst Component = ({ onSubmit }) =\u003e {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleSubmit = useCallback(\n    (e) =\u003e {\n      e.preventDefault();\n      onSubmit(username, password);\n    },\n    [onSubmit, username, password]\n  );\n\n  return (\n    \u003cform onSubmit={handleSubmit}\u003e\n      \u003clabel htmlFor=\"username\"\u003eUsername\u003c/label\u003e\n      \u003cinput\n        id=\"username\"\n        value={username}\n        onChange={(e) =\u003e setUsername(e.target.value)}\n      /\u003e\n      \u003clabel htmlFor=\"password\"\u003ePassword\u003c/label\u003e\n      \u003cinput\n        id=\"password\"\n        value={password}\n        onChange={(e) =\u003e setPassword(e.target.value)}\n      /\u003e\n      \u003cbutton\u003eSubmit\u003c/button\u003e\n    \u003c/form\u003e\n  );\n};\n\nexport default Component;","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dn4mj","text":"In this component user can type its username and password and submit the form. Component should call provided onSubmit with the input user provided.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:57.625+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":793,"position":6,"new_position":6,"published_attributes":{"type":"slide","answers":[],"title":"Setting up tests for login form","body":null,"serialized_body":"\u003cp\u003eWe will create three tests for this component.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003edescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should allow to type into username input\u0026#x27;, async () =\u0026gt; {\n\n  });\n\n  it(\u0026#x27;should allow to type into password input\u0026#x27;, async () =\u0026gt; {\n    \n  });\n\n  it(\u0026#x27;should send form with values from inputs\u0026#x27;, async () =\u0026gt; {\n    \n  });\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"co5dm","text":"We will create three tests for this component.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9h395","text":"describe('Component', () =\u003e {\n  it('should allow to type into username input', async () =\u003e {\n\n  });\n\n  it('should allow to type into password input', async () =\u003e {\n    \n  });\n\n  it('should send form with values from inputs', async () =\u003e {\n    \n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Setting up tests for login form","body":null,"serialized_body":"\u003cp\u003eWe will create three tests for this component.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003edescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should allow to type into username input\u0026#x27;, async () =\u0026gt; {\n\n  });\n\n  it(\u0026#x27;should allow to type into password input\u0026#x27;, async () =\u0026gt; {\n    \n  });\n\n  it(\u0026#x27;should send form with values from inputs\u0026#x27;, async () =\u0026gt; {\n    \n  });\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"co5dm","text":"We will create three tests for this component.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9h395","text":"describe('Component', () =\u003e {\n  it('should allow to type into username input', async () =\u003e {\n\n  });\n\n  it('should allow to type into password input', async () =\u003e {\n    \n  });\n\n  it('should send form with values from inputs', async () =\u003e {\n    \n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:57.625+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":794,"position":7,"new_position":7,"published_attributes":{"type":"slide","answers":[],"title":"Testing username input","body":null,"serialized_body":"\u003cp\u003eTo simulate user typing into input we will use user.type.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should allow to type into username input\u0026#x27;, async () =\u0026gt; {\n  render(\u0026lt;Component /\u0026gt;);\n\n  const usernameInput = screen.getByLabelText(/username/i);\n\n  await user.type(usernameInput, \u0026#x27;my username\u0026#x27;);\n\n  expect(usernameInput.value).toBe(\u0026#x27;my username\u0026#x27;);\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe typed into input and assured the value of input is the same.\u003c/p\u003e\u003cp\u003eThis test may seem trivial but this way we are sure the value and onChange props are setup correctly. It will also be helpful if we decide to refactor and use some form management library to handle our form.\n\u003c/p\u003e","structured_body":{"blocks":[{"key":"4cpph","text":"To simulate user typing into input we will use user.type.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5vgg0","text":"it('should allow to type into username input', async () =\u003e {\n  render(\u003cComponent /\u003e);\n\n  const usernameInput = screen.getByLabelText(/username/i);\n\n  await user.type(usernameInput, 'my username');\n\n  expect(usernameInput.value).toBe('my username');\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fjcjt","text":"We typed into input and assured the value of input is the same.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8itds","text":"This test may seem trivial but this way we are sure the value and onChange props are setup correctly. It will also be helpful if we decide to refactor and use some form management library to handle our form.\n","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Testing username input","body":null,"serialized_body":"\u003cp\u003eTo simulate user typing into input we will use user.type.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should allow to type into username input\u0026#x27;, async () =\u0026gt; {\n  render(\u0026lt;Component /\u0026gt;);\n\n  const usernameInput = screen.getByLabelText(/username/i);\n\n  await user.type(usernameInput, \u0026#x27;my username\u0026#x27;);\n\n  expect(usernameInput.value).toBe(\u0026#x27;my username\u0026#x27;);\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe typed into input and assured the value of input is the same.\u003c/p\u003e\u003cp\u003eThis test may seem trivial but this way we are sure the value and onChange props are setup correctly. It will also be helpful if we decide to refactor and use some form management library to handle our form.\n\u003c/p\u003e","structured_body":{"blocks":[{"key":"4cpph","text":"To simulate user typing into input we will use user.type.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5vgg0","text":"it('should allow to type into username input', async () =\u003e {\n  render(\u003cComponent /\u003e);\n\n  const usernameInput = screen.getByLabelText(/username/i);\n\n  await user.type(usernameInput, 'my username');\n\n  expect(usernameInput.value).toBe('my username');\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fjcjt","text":"We typed into input and assured the value of input is the same.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8itds","text":"This test may seem trivial but this way we are sure the value and onChange props are setup correctly. It will also be helpful if we decide to refactor and use some form management library to handle our form.\n","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:57.625+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":795,"position":8,"new_position":8,"published_attributes":{"type":"slide","answers":[],"title":"Testing password input","body":null,"serialized_body":"\u003cp\u003eThe test for password input will look almost the same.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should allow to type into password input\u0026#x27;, async () =\u0026gt; {\n  render(\u0026lt;Component /\u0026gt;);\n\n  const passwordInput = screen.getByLabelText(/password/i);\n\n  await user.type(passwordInput, \u0026#x27;my password\u0026#x27;);\n\n  expect(passwordInput.value).toBe(\u0026#x27;my password\u0026#x27;);\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"1ipmq","text":"The test for password input will look almost the same.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bckbs","text":"it('should allow to type into password input', async () =\u003e {\n  render(\u003cComponent /\u003e);\n\n  const passwordInput = screen.getByLabelText(/password/i);\n\n  await user.type(passwordInput, 'my password');\n\n  expect(passwordInput.value).toBe('my password');\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Testing password input","body":null,"serialized_body":"\u003cp\u003eThe test for password input will look almost the same.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should allow to type into password input\u0026#x27;, async () =\u0026gt; {\n  render(\u0026lt;Component /\u0026gt;);\n\n  const passwordInput = screen.getByLabelText(/password/i);\n\n  await user.type(passwordInput, \u0026#x27;my password\u0026#x27;);\n\n  expect(passwordInput.value).toBe(\u0026#x27;my password\u0026#x27;);\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"1ipmq","text":"The test for password input will look almost the same.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bckbs","text":"it('should allow to type into password input', async () =\u003e {\n  render(\u003cComponent /\u003e);\n\n  const passwordInput = screen.getByLabelText(/password/i);\n\n  await user.type(passwordInput, 'my password');\n\n  expect(passwordInput.value).toBe('my password');\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:57.625+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":796,"position":9,"new_position":9,"published_attributes":{"type":"slide","answers":[],"title":"Testing form submitting","body":null,"serialized_body":"\u003cp\u003eNow let\u0026#x27;s finish last test. It will tie everything together and send the form.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should send form with values from inputs\u0026#x27;, async () =\u0026gt; {\n  const onSubmitMock = jest.fn();\n  render(\u0026lt;Component onSubmit={onSubmitMock} /\u0026gt;);\n\n  const usernameInput = screen.getByLabelText(/username/i);\n  const passwordInput = screen.getByLabelText(/password/i);\n  const submitButton = screen.getByText(/submit/i);\n\n  await user.type(usernameInput, \u0026#x27;my username\u0026#x27;);\n  await user.type(passwordInput, \u0026#x27;my password\u0026#x27;);\n  user.click(submitButton);\n\n  expect(onSubmitMock).toHaveBeenCalledTimes(1);\n  expect(onSubmitMock).toHaveBeenCalledWith(\u0026#x27;my username\u0026#x27;, \u0026#x27;my password\u0026#x27;);\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThere is nothing new there. We used user.type and mock function to check if function was called with correct arguments.\u003c/p\u003e","structured_body":{"blocks":[{"key":"egdak","text":"Now let's finish last test. It will tie everything together and send the form.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"c04ah","text":"it('should send form with values from inputs', async () =\u003e {\n  const onSubmitMock = jest.fn();\n  render(\u003cComponent onSubmit={onSubmitMock} /\u003e);\n\n  const usernameInput = screen.getByLabelText(/username/i);\n  const passwordInput = screen.getByLabelText(/password/i);\n  const submitButton = screen.getByText(/submit/i);\n\n  await user.type(usernameInput, 'my username');\n  await user.type(passwordInput, 'my password');\n  user.click(submitButton);\n\n  expect(onSubmitMock).toHaveBeenCalledTimes(1);\n  expect(onSubmitMock).toHaveBeenCalledWith('my username', 'my password');\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1ua6q","text":"There is nothing new there. We used user.type and mock function to check if function was called with correct arguments.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Testing form submitting","body":null,"serialized_body":"\u003cp\u003eNow let\u0026#x27;s finish last test. It will tie everything together and send the form.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should send form with values from inputs\u0026#x27;, async () =\u0026gt; {\n  const onSubmitMock = jest.fn();\n  render(\u0026lt;Component onSubmit={onSubmitMock} /\u0026gt;);\n\n  const usernameInput = screen.getByLabelText(/username/i);\n  const passwordInput = screen.getByLabelText(/password/i);\n  const submitButton = screen.getByText(/submit/i);\n\n  await user.type(usernameInput, \u0026#x27;my username\u0026#x27;);\n  await user.type(passwordInput, \u0026#x27;my password\u0026#x27;);\n  user.click(submitButton);\n\n  expect(onSubmitMock).toHaveBeenCalledTimes(1);\n  expect(onSubmitMock).toHaveBeenCalledWith(\u0026#x27;my username\u0026#x27;, \u0026#x27;my password\u0026#x27;);\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThere is nothing new there. We used user.type and mock function to check if function was called with correct arguments.\u003c/p\u003e","structured_body":{"blocks":[{"key":"egdak","text":"Now let's finish last test. It will tie everything together and send the form.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"c04ah","text":"it('should send form with values from inputs', async () =\u003e {\n  const onSubmitMock = jest.fn();\n  render(\u003cComponent onSubmit={onSubmitMock} /\u003e);\n\n  const usernameInput = screen.getByLabelText(/username/i);\n  const passwordInput = screen.getByLabelText(/password/i);\n  const submitButton = screen.getByText(/submit/i);\n\n  await user.type(usernameInput, 'my username');\n  await user.type(passwordInput, 'my password');\n  user.click(submitButton);\n\n  expect(onSubmitMock).toHaveBeenCalledTimes(1);\n  expect(onSubmitMock).toHaveBeenCalledWith('my username', 'my password');\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1ua6q","text":"There is nothing new there. We used user.type and mock function to check if function was called with correct arguments.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:57.625+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":797,"position":10,"new_position":10,"published_attributes":{"type":"slide","answers":[],"title":"Exercise 1 - Button","body":null,"serialized_body":"\u003cp\u003eCreate tests below:\u003c/p\u003e\u003cul\u003e\u003cli\u003echeck if clicking on component calls onClick prop\u003c/li\u003e\u003cli\u003echeck if component renders provided text\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eAnd then implement those functionalities in your Button component.\u003c/p\u003e","structured_body":{"blocks":[{"key":"396f3","text":"Create tests below:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"298u6","text":"check if clicking on component calls onClick prop","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4q3a9","text":"check if component renders provided text","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fo0a","text":"And then implement those functionalities in your Button component.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Exercise 1 - Button","body":null,"serialized_body":"\u003cp\u003eCreate tests below:\u003c/p\u003e\u003cul\u003e\u003cli\u003echeck if clicking on component calls onClick prop\u003c/li\u003e\u003cli\u003echeck if component renders provided text\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eAnd then implement those functionalities in your Button component.\u003c/p\u003e","structured_body":{"blocks":[{"key":"396f3","text":"Create tests below:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"298u6","text":"check if clicking on component calls onClick prop","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4q3a9","text":"check if component renders provided text","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fo0a","text":"And then implement those functionalities in your Button component.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:57.625+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":798,"position":11,"new_position":11,"published_attributes":{"type":"slide","answers":[],"title":"Exercise 2 - Sign Up Form","body":null,"serialized_body":"\u003cp\u003eCreate Sign Up Form component with code below:\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { useCallback, useState } from \u0026#x27;react\u0026#x27;;\n\nconst Component = ({ onSubmit, onSubscribe }) =\u0026gt; {\n  const [email, setEmail] = useState(\u0026#x27;\u0026#x27;);\n  const [password, setPassword] = useState(\u0026#x27;\u0026#x27;);\n  const [shouldSubscribe, setShouldSubscribe] = useState(false);\n  const [role, setRole] = useState(\u0026#x27;developer\u0026#x27;);\n\n  const handleSubmit = useCallback(\n    (e) =\u0026gt; {\n      e.preventDefault();\n      if (shouldSubscribe) {\n        onSubscribe(email);\n      }\n      onSubmit(email, password, role);\n    },\n    [onSubmit, onSubscribe, email, password, shouldSubscribe, role]\n  );\n\n  return (\n    \u0026lt;form onSubmit={handleSubmit}\u0026gt;\n      \u0026lt;label htmlFor=\u0026quot;email\u0026quot;\u0026gt;Email\u0026lt;/label\u0026gt;\n      \u0026lt;input\n        id=\u0026quot;email\u0026quot;\n        value={email}\n        onChange={(e) =\u0026gt; setEmail(e.target.value)}\n      /\u0026gt;\n      \u0026lt;label htmlFor=\u0026quot;password\u0026quot;\u0026gt;Password\u0026lt;/label\u0026gt;\n      \u0026lt;input\n        id=\u0026quot;password\u0026quot;\n        value={password}\n        onChange={(e) =\u0026gt; setPassword(e.target.value)}\n      /\u0026gt;\n      \u0026lt;label htmlFor=\u0026quot;newsletter\u0026quot;\u0026gt;Subscribe to newsletter\u0026lt;/label\u0026gt;\n      \u0026lt;input\n        id=\u0026quot;newsletter\u0026quot;\n        type=\u0026quot;checkbox\u0026quot;\n        checked={shouldSubscribe}\n        onChange={(e) =\u0026gt; setShouldSubscribe(e.target.checked)}\n      /\u0026gt;\n      \u0026lt;label htmlFor=\u0026quot;role\u0026quot;\u0026gt;Your role\u0026lt;/label\u0026gt;\n      \u0026lt;select id=\u0026quot;role\u0026quot; value={role} onChange={(e) =\u0026gt; setRole(e.target.value)}\u0026gt;\n        \u0026lt;option value=\u0026quot;developer\u0026quot;\u0026gt;Developer\u0026lt;/option\u0026gt;\n        \u0026lt;option value=\u0026quot;designer\u0026quot;\u0026gt;Designer\u0026lt;/option\u0026gt;\n        \u0026lt;option value=\u0026quot;other\u0026quot;\u0026gt;Other\u0026lt;/option\u0026gt;\n      \u0026lt;/select\u0026gt;\n      \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt;\n    \u0026lt;/form\u0026gt;\n  );\n};\n\nexport default Component;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd implement tests below. You will have to find in the User Event documentation how to change value of select.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003edescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should call onSubscribe if checkbox selected\u0026#x27;, async () =\u0026gt; {\n\n  });\n\n  it(\u0026#x27;should not call onSubscribe if checkbox was not selected\u0026#x27;, async () =\u0026gt; {\n\n  });\n\n  it(\u0026#x27;should call onSubmit with email, password and role\u0026#x27;, async () =\u0026gt; {\n\n  });\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"5anku","text":"Create Sign Up Form component with code below:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"a9q6o","text":"import { useCallback, useState } from 'react';\n\nconst Component = ({ onSubmit, onSubscribe }) =\u003e {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [shouldSubscribe, setShouldSubscribe] = useState(false);\n  const [role, setRole] = useState('developer');\n\n  const handleSubmit = useCallback(\n    (e) =\u003e {\n      e.preventDefault();\n      if (shouldSubscribe) {\n        onSubscribe(email);\n      }\n      onSubmit(email, password, role);\n    },\n    [onSubmit, onSubscribe, email, password, shouldSubscribe, role]\n  );\n\n  return (\n    \u003cform onSubmit={handleSubmit}\u003e\n      \u003clabel htmlFor=\"email\"\u003eEmail\u003c/label\u003e\n      \u003cinput\n        id=\"email\"\n        value={email}\n        onChange={(e) =\u003e setEmail(e.target.value)}\n      /\u003e\n      \u003clabel htmlFor=\"password\"\u003ePassword\u003c/label\u003e\n      \u003cinput\n        id=\"password\"\n        value={password}\n        onChange={(e) =\u003e setPassword(e.target.value)}\n      /\u003e\n      \u003clabel htmlFor=\"newsletter\"\u003eSubscribe to newsletter\u003c/label\u003e\n      \u003cinput\n        id=\"newsletter\"\n        type=\"checkbox\"\n        checked={shouldSubscribe}\n        onChange={(e) =\u003e setShouldSubscribe(e.target.checked)}\n      /\u003e\n      \u003clabel htmlFor=\"role\"\u003eYour role\u003c/label\u003e\n      \u003cselect id=\"role\" value={role} onChange={(e) =\u003e setRole(e.target.value)}\u003e\n        \u003coption value=\"developer\"\u003eDeveloper\u003c/option\u003e\n        \u003coption value=\"designer\"\u003eDesigner\u003c/option\u003e\n        \u003coption value=\"other\"\u003eOther\u003c/option\u003e\n      \u003c/select\u003e\n      \u003cbutton\u003eSubmit\u003c/button\u003e\n    \u003c/form\u003e\n  );\n};\n\nexport default Component;","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"f04gi","text":"And implement tests below. You will have to find in the User Event documentation how to change value of select.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"r3c7","text":"describe('Component', () =\u003e {\n  it('should call onSubscribe if checkbox selected', async () =\u003e {\n\n  });\n\n  it('should not call onSubscribe if checkbox was not selected', async () =\u003e {\n\n  });\n\n  it('should call onSubmit with email, password and role', async () =\u003e {\n\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Exercise 2 - Sign Up Form","body":null,"serialized_body":"\u003cp\u003eCreate Sign Up Form component with code below:\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { useCallback, useState } from \u0026#x27;react\u0026#x27;;\n\nconst Component = ({ onSubmit, onSubscribe }) =\u0026gt; {\n  const [email, setEmail] = useState(\u0026#x27;\u0026#x27;);\n  const [password, setPassword] = useState(\u0026#x27;\u0026#x27;);\n  const [shouldSubscribe, setShouldSubscribe] = useState(false);\n  const [role, setRole] = useState(\u0026#x27;developer\u0026#x27;);\n\n  const handleSubmit = useCallback(\n    (e) =\u0026gt; {\n      e.preventDefault();\n      if (shouldSubscribe) {\n        onSubscribe(email);\n      }\n      onSubmit(email, password, role);\n    },\n    [onSubmit, onSubscribe, email, password, shouldSubscribe, role]\n  );\n\n  return (\n    \u0026lt;form onSubmit={handleSubmit}\u0026gt;\n      \u0026lt;label htmlFor=\u0026quot;email\u0026quot;\u0026gt;Email\u0026lt;/label\u0026gt;\n      \u0026lt;input\n        id=\u0026quot;email\u0026quot;\n        value={email}\n        onChange={(e) =\u0026gt; setEmail(e.target.value)}\n      /\u0026gt;\n      \u0026lt;label htmlFor=\u0026quot;password\u0026quot;\u0026gt;Password\u0026lt;/label\u0026gt;\n      \u0026lt;input\n        id=\u0026quot;password\u0026quot;\n        value={password}\n        onChange={(e) =\u0026gt; setPassword(e.target.value)}\n      /\u0026gt;\n      \u0026lt;label htmlFor=\u0026quot;newsletter\u0026quot;\u0026gt;Subscribe to newsletter\u0026lt;/label\u0026gt;\n      \u0026lt;input\n        id=\u0026quot;newsletter\u0026quot;\n        type=\u0026quot;checkbox\u0026quot;\n        checked={shouldSubscribe}\n        onChange={(e) =\u0026gt; setShouldSubscribe(e.target.checked)}\n      /\u0026gt;\n      \u0026lt;label htmlFor=\u0026quot;role\u0026quot;\u0026gt;Your role\u0026lt;/label\u0026gt;\n      \u0026lt;select id=\u0026quot;role\u0026quot; value={role} onChange={(e) =\u0026gt; setRole(e.target.value)}\u0026gt;\n        \u0026lt;option value=\u0026quot;developer\u0026quot;\u0026gt;Developer\u0026lt;/option\u0026gt;\n        \u0026lt;option value=\u0026quot;designer\u0026quot;\u0026gt;Designer\u0026lt;/option\u0026gt;\n        \u0026lt;option value=\u0026quot;other\u0026quot;\u0026gt;Other\u0026lt;/option\u0026gt;\n      \u0026lt;/select\u0026gt;\n      \u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt;\n    \u0026lt;/form\u0026gt;\n  );\n};\n\nexport default Component;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd implement tests below. You will have to find in the User Event documentation how to change value of select.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003edescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should call onSubscribe if checkbox selected\u0026#x27;, async () =\u0026gt; {\n\n  });\n\n  it(\u0026#x27;should not call onSubscribe if checkbox was not selected\u0026#x27;, async () =\u0026gt; {\n\n  });\n\n  it(\u0026#x27;should call onSubmit with email, password and role\u0026#x27;, async () =\u0026gt; {\n\n  });\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"5anku","text":"Create Sign Up Form component with code below:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"a9q6o","text":"import { useCallback, useState } from 'react';\n\nconst Component = ({ onSubmit, onSubscribe }) =\u003e {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [shouldSubscribe, setShouldSubscribe] = useState(false);\n  const [role, setRole] = useState('developer');\n\n  const handleSubmit = useCallback(\n    (e) =\u003e {\n      e.preventDefault();\n      if (shouldSubscribe) {\n        onSubscribe(email);\n      }\n      onSubmit(email, password, role);\n    },\n    [onSubmit, onSubscribe, email, password, shouldSubscribe, role]\n  );\n\n  return (\n    \u003cform onSubmit={handleSubmit}\u003e\n      \u003clabel htmlFor=\"email\"\u003eEmail\u003c/label\u003e\n      \u003cinput\n        id=\"email\"\n        value={email}\n        onChange={(e) =\u003e setEmail(e.target.value)}\n      /\u003e\n      \u003clabel htmlFor=\"password\"\u003ePassword\u003c/label\u003e\n      \u003cinput\n        id=\"password\"\n        value={password}\n        onChange={(e) =\u003e setPassword(e.target.value)}\n      /\u003e\n      \u003clabel htmlFor=\"newsletter\"\u003eSubscribe to newsletter\u003c/label\u003e\n      \u003cinput\n        id=\"newsletter\"\n        type=\"checkbox\"\n        checked={shouldSubscribe}\n        onChange={(e) =\u003e setShouldSubscribe(e.target.checked)}\n      /\u003e\n      \u003clabel htmlFor=\"role\"\u003eYour role\u003c/label\u003e\n      \u003cselect id=\"role\" value={role} onChange={(e) =\u003e setRole(e.target.value)}\u003e\n        \u003coption value=\"developer\"\u003eDeveloper\u003c/option\u003e\n        \u003coption value=\"designer\"\u003eDesigner\u003c/option\u003e\n        \u003coption value=\"other\"\u003eOther\u003c/option\u003e\n      \u003c/select\u003e\n      \u003cbutton\u003eSubmit\u003c/button\u003e\n    \u003c/form\u003e\n  );\n};\n\nexport default Component;","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"f04gi","text":"And implement tests below. You will have to find in the User Event documentation how to change value of select.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"r3c7","text":"describe('Component', () =\u003e {\n  it('should call onSubscribe if checkbox selected', async () =\u003e {\n\n  });\n\n  it('should not call onSubscribe if checkbox was not selected', async () =\u003e {\n\n  });\n\n  it('should call onSubmit with email, password and role', async () =\u003e {\n\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:57.625+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]}],"attachments":[]}