{"id":87,"title":"Testing React Components Connected to Redux","estimated_time":8,"user_id":null,"passing_threshold":80,"published_at":"2021-01-18T11:54:14.283+01:00","has_unpublished_changes":false,"has_certificate":false,"external_id":null,"draft_external_id":null,"external_status":"inapplicable","course_type":"bridge","enrollments_count":4,"domain_id":1,"sub_account_id":1,"open_book":null,"description":null,"third_party_course_id":null,"external_course_id":null,"quizzes_count":0,"external_status_message":null,"manual_estimated_time":false,"show_correct_response":true,"max_quiz_attempts":null,"continuing_education_credits":null,"archived_at":null,"config":{},"unpublished_at":null,"external_learning_standard":null,"available_offline":false,"external_version":null,"ordered_slides":[{"id":824,"position":1,"new_position":1,"published_attributes":{"type":"slide","title":"Common solution for testing components which use Redux","body":null,"serialized_body":"\u003cp\u003eThe problem with testing React components connected to Redux is that they have to be first rendered inside a store Provider. This is why for a long time you could see components similar to this\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport React from \u0026quot;react\u0026quot;;\nimport { connect } from \u0026quot;react-redux\u0026quot;;\n\nconst MyComponent = () =\u0026gt; { ... };\n\nconst mapStateToProps = state =\u0026gt; ({\n    data: state.someData,\n});\n\nexport { MyComponent as MyComponentUnwrapped };\nexport default connect(mapStateToProps)(MyComponent);\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd then in tests, you would import MyComponentUnwrapped instead of your default export used everywhere else in the app.\u003c/p\u003e\u003cp\u003eIn this case, you are not testing an important part of your component, the part where state is connected to the component.\u003c/p\u003e\u003cp\u003eOther than that MyComponentUnwrapped is used only by your tests, your real application uses the default export. You will get your tests passing, but  in reality the same cases could fail.\u003c/p\u003e\u003cp\u003eUsing hooks provided by react-redux would also make this approach fail.\u003c/p\u003e","structured_body":{"blocks":[{"key":"14kl5","text":"The problem with testing React components connected to Redux is that they have to be first rendered inside a store Provider. This is why for a long time you could see components similar to this","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"55epe","text":"import React from \"react\";\nimport { connect } from \"react-redux\";\n\nconst MyComponent = () =\u003e { ... };\n\nconst mapStateToProps = state =\u003e ({\n    data: state.someData,\n});\n\nexport { MyComponent as MyComponentUnwrapped };\nexport default connect(mapStateToProps)(MyComponent);","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"94dj0","text":"And then in tests, you would import MyComponentUnwrapped instead of your default export used everywhere else in the app.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"88usv","text":"In this case, you are not testing an important part of your component, the part where state is connected to the component.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dfir0","text":"Other than that MyComponentUnwrapped is used only by your tests, your real application uses the default export. You will get your tests passing, but  in reality the same cases could fail.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9gap1","text":"Using hooks provided by react-redux would also make this approach fail.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"answers":[],"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","title":"Common solution for testing components which use Redux","body":null,"serialized_body":"\u003cp\u003eThe problem with testing React components connected to Redux is that they have to be first rendered inside a store Provider. This is why for a long time you could see components similar to this\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport React from \u0026quot;react\u0026quot;;\nimport { connect } from \u0026quot;react-redux\u0026quot;;\n\nconst MyComponent = () =\u0026gt; { ... };\n\nconst mapStateToProps = state =\u0026gt; ({\n    data: state.someData,\n});\n\nexport { MyComponent as MyComponentUnwrapped };\nexport default connect(mapStateToProps)(MyComponent);\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd then in tests, you would import MyComponentUnwrapped instead of your default export used everywhere else in the app.\u003c/p\u003e\u003cp\u003eIn this case, you are not testing an important part of your component, the part where state is connected to the component.\u003c/p\u003e\u003cp\u003eOther than that MyComponentUnwrapped is used only by your tests, your real application uses the default export. You will get your tests passing, but  in reality the same cases could fail.\u003c/p\u003e\u003cp\u003eUsing hooks provided by react-redux would also make this approach fail.\u003c/p\u003e","structured_body":{"blocks":[{"key":"14kl5","text":"The problem with testing React components connected to Redux is that they have to be first rendered inside a store Provider. This is why for a long time you could see components similar to this","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"55epe","text":"import React from \"react\";\nimport { connect } from \"react-redux\";\n\nconst MyComponent = () =\u003e { ... };\n\nconst mapStateToProps = state =\u003e ({\n    data: state.someData,\n});\n\nexport { MyComponent as MyComponentUnwrapped };\nexport default connect(mapStateToProps)(MyComponent);","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"94dj0","text":"And then in tests, you would import MyComponentUnwrapped instead of your default export used everywhere else in the app.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"88usv","text":"In this case, you are not testing an important part of your component, the part where state is connected to the component.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dfir0","text":"Other than that MyComponentUnwrapped is used only by your tests, your real application uses the default export. You will get your tests passing, but  in reality the same cases could fail.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9gap1","text":"Using hooks provided by react-redux would also make this approach fail.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"answers":[],"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:14.283+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":826,"position":2,"new_position":2,"published_attributes":{"type":"slide","answers":[],"title":"Creating Counter component","body":null,"serialized_body":"\u003cp\u003eLet\u0026#x27;s start with very simple component connected to Redux.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003e/* ComponentWithRedux.js */\nimport { useDispatch, useSelector } from \u0026#x27;react-redux\u0026#x27;;\nimport { increase, decrease } from \u0026#x27;./store\u0026#x27;;\n\nconst Counter = () =\u0026gt; {\n  const dispatch = useDispatch();\n  const count = useSelector((state) =\u0026gt; state);\n\n  return (\n    \u0026lt;div\u0026gt;\n      \u0026lt;span data-testid=\u0026quot;count\u0026quot;\u0026gt;{count}\u0026lt;/span\u0026gt;\n      \u0026lt;button onClick={() =\u0026gt; dispatch(increase())}\u0026gt;Increase\u0026lt;/button\u0026gt;\n      \u0026lt;button onClick={() =\u0026gt; dispatch(decrease())}\u0026gt;Decrease\u0026lt;/button\u0026gt;\n    \u0026lt;/div\u0026gt;\n  );\n};\n\nexport default Counter;\n/* store.js */\nimport { createStore } from \u0026#x27;redux\u0026#x27;;\n\nexport const increase = () =\u0026gt; ({\n  type: \u0026#x27;INCREASE\u0026#x27;,\n});\n\nexport const decrease = () =\u0026gt; ({\n  type: \u0026#x27;DECREASE\u0026#x27;,\n});\n\nexport const reducer = (state = 0, action) =\u0026gt; {\n  if (action.type === \u0026#x27;INCREASE\u0026#x27;) {\n    return state + 1;\n  }\n  if (action.type === \u0026#x27;DECREASE\u0026#x27;) {\n    return state - 1;\n  }\n  return state;\n};\n\nexport const store = createStore(reducer);\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"6targ","text":"Let's start with very simple component connected to Redux.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4hbiu","text":"/* ComponentWithRedux.js */\nimport { useDispatch, useSelector } from 'react-redux';\nimport { increase, decrease } from './store';\n\nconst Counter = () =\u003e {\n  const dispatch = useDispatch();\n  const count = useSelector((state) =\u003e state);\n\n  return (\n    \u003cdiv\u003e\n      \u003cspan data-testid=\"count\"\u003e{count}\u003c/span\u003e\n      \u003cbutton onClick={() =\u003e dispatch(increase())}\u003eIncrease\u003c/button\u003e\n      \u003cbutton onClick={() =\u003e dispatch(decrease())}\u003eDecrease\u003c/button\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default Counter;\n/* store.js */\nimport { createStore } from 'redux';\n\nexport const increase = () =\u003e ({\n  type: 'INCREASE',\n});\n\nexport const decrease = () =\u003e ({\n  type: 'DECREASE',\n});\n\nexport const reducer = (state = 0, action) =\u003e {\n  if (action.type === 'INCREASE') {\n    return state + 1;\n  }\n  if (action.type === 'DECREASE') {\n    return state - 1;\n  }\n  return state;\n};\n\nexport const store = createStore(reducer);","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Creating Counter component","body":null,"serialized_body":"\u003cp\u003eLet\u0026#x27;s start with very simple component connected to Redux.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003e/* ComponentWithRedux.js */\nimport { useDispatch, useSelector } from \u0026#x27;react-redux\u0026#x27;;\nimport { increase, decrease } from \u0026#x27;./store\u0026#x27;;\n\nconst Counter = () =\u0026gt; {\n  const dispatch = useDispatch();\n  const count = useSelector((state) =\u0026gt; state);\n\n  return (\n    \u0026lt;div\u0026gt;\n      \u0026lt;span data-testid=\u0026quot;count\u0026quot;\u0026gt;{count}\u0026lt;/span\u0026gt;\n      \u0026lt;button onClick={() =\u0026gt; dispatch(increase())}\u0026gt;Increase\u0026lt;/button\u0026gt;\n      \u0026lt;button onClick={() =\u0026gt; dispatch(decrease())}\u0026gt;Decrease\u0026lt;/button\u0026gt;\n    \u0026lt;/div\u0026gt;\n  );\n};\n\nexport default Counter;\n/* store.js */\nimport { createStore } from \u0026#x27;redux\u0026#x27;;\n\nexport const increase = () =\u0026gt; ({\n  type: \u0026#x27;INCREASE\u0026#x27;,\n});\n\nexport const decrease = () =\u0026gt; ({\n  type: \u0026#x27;DECREASE\u0026#x27;,\n});\n\nexport const reducer = (state = 0, action) =\u0026gt; {\n  if (action.type === \u0026#x27;INCREASE\u0026#x27;) {\n    return state + 1;\n  }\n  if (action.type === \u0026#x27;DECREASE\u0026#x27;) {\n    return state - 1;\n  }\n  return state;\n};\n\nexport const store = createStore(reducer);\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"6targ","text":"Let's start with very simple component connected to Redux.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4hbiu","text":"/* ComponentWithRedux.js */\nimport { useDispatch, useSelector } from 'react-redux';\nimport { increase, decrease } from './store';\n\nconst Counter = () =\u003e {\n  const dispatch = useDispatch();\n  const count = useSelector((state) =\u003e state);\n\n  return (\n    \u003cdiv\u003e\n      \u003cspan data-testid=\"count\"\u003e{count}\u003c/span\u003e\n      \u003cbutton onClick={() =\u003e dispatch(increase())}\u003eIncrease\u003c/button\u003e\n      \u003cbutton onClick={() =\u003e dispatch(decrease())}\u003eDecrease\u003c/button\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default Counter;\n/* store.js */\nimport { createStore } from 'redux';\n\nexport const increase = () =\u003e ({\n  type: 'INCREASE',\n});\n\nexport const decrease = () =\u003e ({\n  type: 'DECREASE',\n});\n\nexport const reducer = (state = 0, action) =\u003e {\n  if (action.type === 'INCREASE') {\n    return state + 1;\n  }\n  if (action.type === 'DECREASE') {\n    return state - 1;\n  }\n  return state;\n};\n\nexport const store = createStore(reducer);","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:14.283+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":827,"position":3,"new_position":3,"published_attributes":{"type":"slide","answers":[],"title":"Setting up tests for Counter component","body":null,"serialized_body":"\u003cp\u003eFrom the user perspective this component can do three things. Show current counter, increase it and decrease it. Let\u0026#x27;s test it.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003edescribe(\u0026#x27;Counter\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should show current counter\u0026#x27;, () =\u0026gt; {\n\n  });\n\n  it(\u0026#x27;should increase counter\u0026#x27;, () =\u0026gt; {\n\n  });\n\n  it(\u0026#x27;should decrease counter\u0026#x27;, () =\u0026gt; {\n\n  });\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow if you try to render the Counter component you might see a familiar message.\u003c/p\u003e\u003cimg src=\"https://cdn.dub.bridgeapp.com/512/1/uploads/39749a62-d357-4189-a87a-78b76691e4ef.png?response-content-disposition=attachment%3Bfilename%3DUntitled+%283%29+%281%29.png\u0026amp;Expires=1606743800\u0026amp;Signature=cYVpwHeduTpCiNqmjFhzUTxw0OwdamRxjU7cKlf3PvCGg8wjMr6z0gCFj~umpPI1AohhmOlbbn-LhI-6Mo8pvPduClWZi8wuhBdJbkw~YONoMXiEkbmUZwb0kUpz7~Jcvw3L16IB5UBZrZvN90--HXCr5i6i9GpCfu8srH~wstUkR~VTHmNcrIZBcI9Al6BHcPLZXLh~RFyBruTiH~L3hvKtmLXFgUykFBNAX3xbeI-Uit2xX3X06uVAHpJEQdowo-ZpI~dYwTbNlpbxKA7CQ0MUgo66sFPt0E1GGdf4qAYw1oJmchuBWa-5fJawR3NOk4sXDyaNzfBqqZa~nkyIsg__\u0026amp;Key-Pair-Id=APKAJXAC3ZZLINBJN2EQ\"/\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eThe error message explains very well what happened. While you whole app might be wrapper in Provider, the component itself used in tests isn\u0026#x27;t. We have to create a wrapper which will wrap our component in Provider.\u003c/p\u003e","structured_body":{"blocks":[{"key":"erc6g","text":"From the user perspective this component can do three things. Show current counter, increase it and decrease it. Let's test it.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{"entityRefreshHax":1}},{"key":"6lr1k","text":"describe('Counter', () =\u003e {\n  it('should show current counter', () =\u003e {\n\n  });\n\n  it('should increase counter', () =\u003e {\n\n  });\n\n  it('should decrease counter', () =\u003e {\n\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bmclp","text":"Now if you try to render the Counter component you might see a familiar message.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"c4kml","text":" ","type":"atomic","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":0,"length":1,"key":0}],"data":{}},{"key":"17nhg","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6gtdt","text":"The error message explains very well what happened. While you whole app might be wrapper in Provider, the component itself used in tests isn't. We have to create a wrapper which will wrap our component in Provider.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{"0":{"type":"image","mutability":"IMMUTABLE","data":{"uploadId":null,"src":"https://cdn.dub.bridgeapp.com/512/1/uploads/39749a62-d357-4189-a87a-78b76691e4ef.png?response-content-disposition=attachment%3Bfilename%3DUntitled+%283%29+%281%29.png\u0026Expires=1606743800\u0026Signature=cYVpwHeduTpCiNqmjFhzUTxw0OwdamRxjU7cKlf3PvCGg8wjMr6z0gCFj~umpPI1AohhmOlbbn-LhI-6Mo8pvPduClWZi8wuhBdJbkw~YONoMXiEkbmUZwb0kUpz7~Jcvw3L16IB5UBZrZvN90--HXCr5i6i9GpCfu8srH~wstUkR~VTHmNcrIZBcI9Al6BHcPLZXLh~RFyBruTiH~L3hvKtmLXFgUykFBNAX3xbeI-Uit2xX3X06uVAHpJEQdowo-ZpI~dYwTbNlpbxKA7CQ0MUgo66sFPt0E1GGdf4qAYw1oJmchuBWa-5fJawR3NOk4sXDyaNzfBqqZa~nkyIsg__\u0026Key-Pair-Id=APKAJXAC3ZZLINBJN2EQ","attachmentId":"1747"}}}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Setting up tests for Counter component","body":null,"serialized_body":"\u003cp\u003eFrom the user perspective this component can do three things. Show current counter, increase it and decrease it. Let\u0026#x27;s test it.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003edescribe(\u0026#x27;Counter\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should show current counter\u0026#x27;, () =\u0026gt; {\n\n  });\n\n  it(\u0026#x27;should increase counter\u0026#x27;, () =\u0026gt; {\n\n  });\n\n  it(\u0026#x27;should decrease counter\u0026#x27;, () =\u0026gt; {\n\n  });\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow if you try to render the Counter component you might see a familiar message.\u003c/p\u003e\u003cimg src=\"https://cdn.dub.bridgeapp.com/512/1/uploads/39749a62-d357-4189-a87a-78b76691e4ef.png?response-content-disposition=attachment%3Bfilename%3DUntitled+%283%29+%281%29.png\u0026amp;Expires=1606743800\u0026amp;Signature=cYVpwHeduTpCiNqmjFhzUTxw0OwdamRxjU7cKlf3PvCGg8wjMr6z0gCFj~umpPI1AohhmOlbbn-LhI-6Mo8pvPduClWZi8wuhBdJbkw~YONoMXiEkbmUZwb0kUpz7~Jcvw3L16IB5UBZrZvN90--HXCr5i6i9GpCfu8srH~wstUkR~VTHmNcrIZBcI9Al6BHcPLZXLh~RFyBruTiH~L3hvKtmLXFgUykFBNAX3xbeI-Uit2xX3X06uVAHpJEQdowo-ZpI~dYwTbNlpbxKA7CQ0MUgo66sFPt0E1GGdf4qAYw1oJmchuBWa-5fJawR3NOk4sXDyaNzfBqqZa~nkyIsg__\u0026amp;Key-Pair-Id=APKAJXAC3ZZLINBJN2EQ\"/\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eThe error message explains very well what happened. While you whole app might be wrapper in Provider, the component itself used in tests isn\u0026#x27;t. We have to create a wrapper which will wrap our component in Provider.\u003c/p\u003e","structured_body":{"blocks":[{"key":"erc6g","text":"From the user perspective this component can do three things. Show current counter, increase it and decrease it. Let's test it.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{"entityRefreshHax":1}},{"key":"6lr1k","text":"describe('Counter', () =\u003e {\n  it('should show current counter', () =\u003e {\n\n  });\n\n  it('should increase counter', () =\u003e {\n\n  });\n\n  it('should decrease counter', () =\u003e {\n\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bmclp","text":"Now if you try to render the Counter component you might see a familiar message.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"c4kml","text":" ","type":"atomic","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":0,"length":1,"key":0}],"data":{}},{"key":"17nhg","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6gtdt","text":"The error message explains very well what happened. While you whole app might be wrapper in Provider, the component itself used in tests isn't. We have to create a wrapper which will wrap our component in Provider.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{"0":{"type":"image","mutability":"IMMUTABLE","data":{"uploadId":null,"src":"https://cdn.dub.bridgeapp.com/512/1/uploads/39749a62-d357-4189-a87a-78b76691e4ef.png?response-content-disposition=attachment%3Bfilename%3DUntitled+%283%29+%281%29.png\u0026Expires=1606743800\u0026Signature=cYVpwHeduTpCiNqmjFhzUTxw0OwdamRxjU7cKlf3PvCGg8wjMr6z0gCFj~umpPI1AohhmOlbbn-LhI-6Mo8pvPduClWZi8wuhBdJbkw~YONoMXiEkbmUZwb0kUpz7~Jcvw3L16IB5UBZrZvN90--HXCr5i6i9GpCfu8srH~wstUkR~VTHmNcrIZBcI9Al6BHcPLZXLh~RFyBruTiH~L3hvKtmLXFgUykFBNAX3xbeI-Uit2xX3X06uVAHpJEQdowo-ZpI~dYwTbNlpbxKA7CQ0MUgo66sFPt0E1GGdf4qAYw1oJmchuBWa-5fJawR3NOk4sXDyaNzfBqqZa~nkyIsg__\u0026Key-Pair-Id=APKAJXAC3ZZLINBJN2EQ","attachmentId":"1747"}}}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:14.283+01:00","estimated_time":1,"attachments_count":1,"presentable":true,"external_id":null,"attachments":[{"id":1747,"notorious_id":null,"location":"https://s3-eu-west-1.amazonaws.com/bridge-learn-file-store-prod-dub/512/1/uploads/39749a62-d357-4189-a87a-78b76691e4ef.png","duration":null,"name":"Untitled (3) (1).png","learner_visible":true,"confirmed":false,"user_id":457,"context_type":"Slide","content_type":"image/png","file_modified_at":null,"availability":"complete","media":null,"migrated_at":null,"sources":[]}]},{"id":828,"position":4,"new_position":4,"published_attributes":{"type":"slide","answers":[],"title":"Creating StoreProvider","body":null,"serialized_body":"\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { Provider } from \u0026#x27;react-redux\u0026#x27;;\nimport { createStore } from \u0026#x27;redux\u0026#x27;;\n\nimport { reducer } from \u0026#x27;./store\u0026#x27;;\n\nconst getProvider = (initialState) =\u0026gt; {\n  const store = createStore(reducer, initialState);\n\n  const StoreProvider = ({ children }) =\u0026gt; (\n    \u0026lt;Provider store={store}\u0026gt;{children}\u0026lt;/Provider\u0026gt;\n  );\n\n  return StoreProvider;\n};\u003c/code\u003e\u003c/pre\u003e\u003cp\u003egetProvider is a function which creates a StoreProvider component with an initial state provided as argument.In order to use it we need to call this function and create a Provider in every test. Then pass it as wrapper to render options.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003econst StoreProvider = getProvider(0); // 0 is an initial state\nrender(\u0026lt;Counter /\u0026gt;, { wrapper: StoreProvider });\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"8vb29","text":"import { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport { reducer } from './store';\n\nconst getProvider = (initialState) =\u003e {\n  const store = createStore(reducer, initialState);\n\n  const StoreProvider = ({ children }) =\u003e (\n    \u003cProvider store={store}\u003e{children}\u003c/Provider\u003e\n  );\n\n  return StoreProvider;\n};","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6hec4","text":"getProvider is a function which creates a StoreProvider component with an initial state provided as argument.In order to use it we need to call this function and create a Provider in every test. Then pass it as wrapper to render options.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"88g5l","text":"const StoreProvider = getProvider(0); // 0 is an initial state\nrender(\u003cCounter /\u003e, { wrapper: StoreProvider });","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Creating StoreProvider","body":null,"serialized_body":"\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { Provider } from \u0026#x27;react-redux\u0026#x27;;\nimport { createStore } from \u0026#x27;redux\u0026#x27;;\n\nimport { reducer } from \u0026#x27;./store\u0026#x27;;\n\nconst getProvider = (initialState) =\u0026gt; {\n  const store = createStore(reducer, initialState);\n\n  const StoreProvider = ({ children }) =\u0026gt; (\n    \u0026lt;Provider store={store}\u0026gt;{children}\u0026lt;/Provider\u0026gt;\n  );\n\n  return StoreProvider;\n};\u003c/code\u003e\u003c/pre\u003e\u003cp\u003egetProvider is a function which creates a StoreProvider component with an initial state provided as argument.In order to use it we need to call this function and create a Provider in every test. Then pass it as wrapper to render options.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003econst StoreProvider = getProvider(0); // 0 is an initial state\nrender(\u0026lt;Counter /\u0026gt;, { wrapper: StoreProvider });\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"8vb29","text":"import { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport { reducer } from './store';\n\nconst getProvider = (initialState) =\u003e {\n  const store = createStore(reducer, initialState);\n\n  const StoreProvider = ({ children }) =\u003e (\n    \u003cProvider store={store}\u003e{children}\u003c/Provider\u003e\n  );\n\n  return StoreProvider;\n};","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6hec4","text":"getProvider is a function which creates a StoreProvider component with an initial state provided as argument.In order to use it we need to call this function and create a Provider in every test. Then pass it as wrapper to render options.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"88g5l","text":"const StoreProvider = getProvider(0); // 0 is an initial state\nrender(\u003cCounter /\u003e, { wrapper: StoreProvider });","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:14.283+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":829,"position":5,"new_position":5,"published_attributes":{"type":"slide","answers":[],"title":"Implementing Counter component tests","body":null,"serialized_body":"\u003cp\u003eLet\u0026#x27;s go back to tests we described before. In order to implement them we will use StoreProvider wrapper and functionalities of @testing-library we already practiced.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003edescribe(\u0026#x27;Counter\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should show current counter\u0026#x27;, () =\u0026gt; {\n    const StoreProvider = getProvider(5);\n    render(\u0026lt;Counter /\u0026gt;, { wrapper: StoreProvider });\n\n    expect(screen.getByTestId(\u0026#x27;count\u0026#x27;)).toHaveTextContent(\u0026#x27;5\u0026#x27;);\n  });\n\n  it(\u0026#x27;should increase counter\u0026#x27;, () =\u0026gt; {\n    const StoreProvider = getProvider(0);\n    render(\u0026lt;Counter /\u0026gt;, { wrapper: StoreProvider });\n\n    user.click(screen.getByText(/increase/i));\n\n    expect(screen.getByTestId(\u0026#x27;count\u0026#x27;)).toHaveTextContent(\u0026#x27;1\u0026#x27;);\n  });\n\n  it(\u0026#x27;should decrease counter\u0026#x27;, () =\u0026gt; {\n    const StoreProvider = getProvider(0);\n    render(\u0026lt;Counter /\u0026gt;, { wrapper: StoreProvider });\n\n    user.click(screen.getByText(/decrease/i));\n\n    expect(screen.getByTestId(\u0026#x27;count\u0026#x27;)).toHaveTextContent(\u0026#x27;-1\u0026#x27;);\n  });\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs you can see we didn\u0026#x27;t touch the implementation details of our Redux Store. We didn\u0026#x27;t dispatched actions directly nor accessed the state. We tested the same things user would use when interacting with our component.\u003c/p\u003e","structured_body":{"blocks":[{"key":"24n91","text":"Let's go back to tests we described before. In order to implement them we will use StoreProvider wrapper and functionalities of @testing-library we already practiced.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2esk","text":"describe('Counter', () =\u003e {\n  it('should show current counter', () =\u003e {\n    const StoreProvider = getProvider(5);\n    render(\u003cCounter /\u003e, { wrapper: StoreProvider });\n\n    expect(screen.getByTestId('count')).toHaveTextContent('5');\n  });\n\n  it('should increase counter', () =\u003e {\n    const StoreProvider = getProvider(0);\n    render(\u003cCounter /\u003e, { wrapper: StoreProvider });\n\n    user.click(screen.getByText(/increase/i));\n\n    expect(screen.getByTestId('count')).toHaveTextContent('1');\n  });\n\n  it('should decrease counter', () =\u003e {\n    const StoreProvider = getProvider(0);\n    render(\u003cCounter /\u003e, { wrapper: StoreProvider });\n\n    user.click(screen.getByText(/decrease/i));\n\n    expect(screen.getByTestId('count')).toHaveTextContent('-1');\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"abakn","text":"As you can see we didn't touch the implementation details of our Redux Store. We didn't dispatched actions directly nor accessed the state. We tested the same things user would use when interacting with our component.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Implementing Counter component tests","body":null,"serialized_body":"\u003cp\u003eLet\u0026#x27;s go back to tests we described before. In order to implement them we will use StoreProvider wrapper and functionalities of @testing-library we already practiced.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003edescribe(\u0026#x27;Counter\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should show current counter\u0026#x27;, () =\u0026gt; {\n    const StoreProvider = getProvider(5);\n    render(\u0026lt;Counter /\u0026gt;, { wrapper: StoreProvider });\n\n    expect(screen.getByTestId(\u0026#x27;count\u0026#x27;)).toHaveTextContent(\u0026#x27;5\u0026#x27;);\n  });\n\n  it(\u0026#x27;should increase counter\u0026#x27;, () =\u0026gt; {\n    const StoreProvider = getProvider(0);\n    render(\u0026lt;Counter /\u0026gt;, { wrapper: StoreProvider });\n\n    user.click(screen.getByText(/increase/i));\n\n    expect(screen.getByTestId(\u0026#x27;count\u0026#x27;)).toHaveTextContent(\u0026#x27;1\u0026#x27;);\n  });\n\n  it(\u0026#x27;should decrease counter\u0026#x27;, () =\u0026gt; {\n    const StoreProvider = getProvider(0);\n    render(\u0026lt;Counter /\u0026gt;, { wrapper: StoreProvider });\n\n    user.click(screen.getByText(/decrease/i));\n\n    expect(screen.getByTestId(\u0026#x27;count\u0026#x27;)).toHaveTextContent(\u0026#x27;-1\u0026#x27;);\n  });\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs you can see we didn\u0026#x27;t touch the implementation details of our Redux Store. We didn\u0026#x27;t dispatched actions directly nor accessed the state. We tested the same things user would use when interacting with our component.\u003c/p\u003e","structured_body":{"blocks":[{"key":"24n91","text":"Let's go back to tests we described before. In order to implement them we will use StoreProvider wrapper and functionalities of @testing-library we already practiced.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2esk","text":"describe('Counter', () =\u003e {\n  it('should show current counter', () =\u003e {\n    const StoreProvider = getProvider(5);\n    render(\u003cCounter /\u003e, { wrapper: StoreProvider });\n\n    expect(screen.getByTestId('count')).toHaveTextContent('5');\n  });\n\n  it('should increase counter', () =\u003e {\n    const StoreProvider = getProvider(0);\n    render(\u003cCounter /\u003e, { wrapper: StoreProvider });\n\n    user.click(screen.getByText(/increase/i));\n\n    expect(screen.getByTestId('count')).toHaveTextContent('1');\n  });\n\n  it('should decrease counter', () =\u003e {\n    const StoreProvider = getProvider(0);\n    render(\u003cCounter /\u003e, { wrapper: StoreProvider });\n\n    user.click(screen.getByText(/decrease/i));\n\n    expect(screen.getByTestId('count')).toHaveTextContent('-1');\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"abakn","text":"As you can see we didn't touch the implementation details of our Redux Store. We didn't dispatched actions directly nor accessed the state. We tested the same things user would use when interacting with our component.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:14.283+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":830,"position":6,"new_position":6,"published_attributes":{"type":"slide","answers":[],"title":"Creating renderWithStore helper","body":null,"serialized_body":"\u003cp\u003eAs you can see there is some repetition in our tests. We have to create StoreProvider in every tests and then pass it as wrapper. This is unnecessary boilerplate we can avoid, by creating a helper function - renderWithStore.\u003c/p\u003e\u003cp\u003eWe want to create a render function which offers the same as render from @testing-library/react, but can take initialState as options and wrap our component in Provider.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003econst renderWithStore = (\n  ui,\n  { initialState, ...renderOptions } = {}\n) =\u0026gt; {\n  const store = createStore(reducer, initialState);\n  const Wrapper = ({ children }) =\u0026gt; (\n    \u0026lt;Provider store={store}\u0026gt;{children}\u0026lt;/Provider\u0026gt;\n  );\n\n  return render(ui, { wrapper: Wrapper, ...renderOptions });\n};\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs you can see this function is very similar to getProvider but instead of creating a wrapper it renders the component and passes Wrapper for us.\u003c/p\u003e","structured_body":{"blocks":[{"key":"96d3m","text":"As you can see there is some repetition in our tests. We have to create StoreProvider in every tests and then pass it as wrapper. This is unnecessary boilerplate we can avoid, by creating a helper function - renderWithStore.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6bltd","text":"We want to create a render function which offers the same as render from @testing-library/react, but can take initialState as options and wrap our component in Provider.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5aato","text":"const renderWithStore = (\n  ui,\n  { initialState, ...renderOptions } = {}\n) =\u003e {\n  const store = createStore(reducer, initialState);\n  const Wrapper = ({ children }) =\u003e (\n    \u003cProvider store={store}\u003e{children}\u003c/Provider\u003e\n  );\n\n  return render(ui, { wrapper: Wrapper, ...renderOptions });\n};","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9srf3","text":"As you can see this function is very similar to getProvider but instead of creating a wrapper it renders the component and passes Wrapper for us.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Creating renderWithStore helper","body":null,"serialized_body":"\u003cp\u003eAs you can see there is some repetition in our tests. We have to create StoreProvider in every tests and then pass it as wrapper. This is unnecessary boilerplate we can avoid, by creating a helper function - renderWithStore.\u003c/p\u003e\u003cp\u003eWe want to create a render function which offers the same as render from @testing-library/react, but can take initialState as options and wrap our component in Provider.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003econst renderWithStore = (\n  ui,\n  { initialState, ...renderOptions } = {}\n) =\u0026gt; {\n  const store = createStore(reducer, initialState);\n  const Wrapper = ({ children }) =\u0026gt; (\n    \u0026lt;Provider store={store}\u0026gt;{children}\u0026lt;/Provider\u0026gt;\n  );\n\n  return render(ui, { wrapper: Wrapper, ...renderOptions });\n};\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs you can see this function is very similar to getProvider but instead of creating a wrapper it renders the component and passes Wrapper for us.\u003c/p\u003e","structured_body":{"blocks":[{"key":"96d3m","text":"As you can see there is some repetition in our tests. We have to create StoreProvider in every tests and then pass it as wrapper. This is unnecessary boilerplate we can avoid, by creating a helper function - renderWithStore.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6bltd","text":"We want to create a render function which offers the same as render from @testing-library/react, but can take initialState as options and wrap our component in Provider.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5aato","text":"const renderWithStore = (\n  ui,\n  { initialState, ...renderOptions } = {}\n) =\u003e {\n  const store = createStore(reducer, initialState);\n  const Wrapper = ({ children }) =\u003e (\n    \u003cProvider store={store}\u003e{children}\u003c/Provider\u003e\n  );\n\n  return render(ui, { wrapper: Wrapper, ...renderOptions });\n};","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9srf3","text":"As you can see this function is very similar to getProvider but instead of creating a wrapper it renders the component and passes Wrapper for us.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:14.283+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":831,"position":7,"new_position":7,"published_attributes":{"type":"slide","answers":[],"title":"Using renderWithStore","body":null,"serialized_body":"\u003cp\u003eWe will use it the same we used render before, but now we can use additional option - initialState.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003edescribe(\u0026#x27;Counter\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should show current counter\u0026#x27;, () =\u0026gt; {\n    renderWithStore(\u0026lt;Counter /\u0026gt;, { initialState: 5 });\n\n    expect(screen.getByTestId(\u0026#x27;count\u0026#x27;)).toHaveTextContent(\u0026#x27;5\u0026#x27;);\n  });\n\n  it(\u0026#x27;should increase counter\u0026#x27;, () =\u0026gt; {\n    renderWithStore(\u0026lt;Counter /\u0026gt;, { initialState: 0 });\n\n    user.click(screen.getByText(/increase/i));\n\n    expect(screen.getByTestId(\u0026#x27;count\u0026#x27;)).toHaveTextContent(\u0026#x27;1\u0026#x27;);\n  });\n\n  it(\u0026#x27;should decrease counter\u0026#x27;, () =\u0026gt; {\n    renderWithStore(\u0026lt;Counter /\u0026gt;, { initialState: 0 });\n\n    user.click(screen.getByText(/decrease/i));\n\n    expect(screen.getByTestId(\u0026#x27;count\u0026#x27;)).toHaveTextContent(\u0026#x27;-1\u0026#x27;);\n  });\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003erenderWithStore should be moved to a separate file and used in other tests where we interact with Redux.\u003c/p\u003e","structured_body":{"blocks":[{"key":"bdfi4","text":"We will use it the same we used render before, but now we can use additional option - initialState.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7dmkn","text":"describe('Counter', () =\u003e {\n  it('should show current counter', () =\u003e {\n    renderWithStore(\u003cCounter /\u003e, { initialState: 5 });\n\n    expect(screen.getByTestId('count')).toHaveTextContent('5');\n  });\n\n  it('should increase counter', () =\u003e {\n    renderWithStore(\u003cCounter /\u003e, { initialState: 0 });\n\n    user.click(screen.getByText(/increase/i));\n\n    expect(screen.getByTestId('count')).toHaveTextContent('1');\n  });\n\n  it('should decrease counter', () =\u003e {\n    renderWithStore(\u003cCounter /\u003e, { initialState: 0 });\n\n    user.click(screen.getByText(/decrease/i));\n\n    expect(screen.getByTestId('count')).toHaveTextContent('-1');\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"a18fa","text":"renderWithStore should be moved to a separate file and used in other tests where we interact with Redux.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Using renderWithStore","body":null,"serialized_body":"\u003cp\u003eWe will use it the same we used render before, but now we can use additional option - initialState.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003edescribe(\u0026#x27;Counter\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should show current counter\u0026#x27;, () =\u0026gt; {\n    renderWithStore(\u0026lt;Counter /\u0026gt;, { initialState: 5 });\n\n    expect(screen.getByTestId(\u0026#x27;count\u0026#x27;)).toHaveTextContent(\u0026#x27;5\u0026#x27;);\n  });\n\n  it(\u0026#x27;should increase counter\u0026#x27;, () =\u0026gt; {\n    renderWithStore(\u0026lt;Counter /\u0026gt;, { initialState: 0 });\n\n    user.click(screen.getByText(/increase/i));\n\n    expect(screen.getByTestId(\u0026#x27;count\u0026#x27;)).toHaveTextContent(\u0026#x27;1\u0026#x27;);\n  });\n\n  it(\u0026#x27;should decrease counter\u0026#x27;, () =\u0026gt; {\n    renderWithStore(\u0026lt;Counter /\u0026gt;, { initialState: 0 });\n\n    user.click(screen.getByText(/decrease/i));\n\n    expect(screen.getByTestId(\u0026#x27;count\u0026#x27;)).toHaveTextContent(\u0026#x27;-1\u0026#x27;);\n  });\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003erenderWithStore should be moved to a separate file and used in other tests where we interact with Redux.\u003c/p\u003e","structured_body":{"blocks":[{"key":"bdfi4","text":"We will use it the same we used render before, but now we can use additional option - initialState.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7dmkn","text":"describe('Counter', () =\u003e {\n  it('should show current counter', () =\u003e {\n    renderWithStore(\u003cCounter /\u003e, { initialState: 5 });\n\n    expect(screen.getByTestId('count')).toHaveTextContent('5');\n  });\n\n  it('should increase counter', () =\u003e {\n    renderWithStore(\u003cCounter /\u003e, { initialState: 0 });\n\n    user.click(screen.getByText(/increase/i));\n\n    expect(screen.getByTestId('count')).toHaveTextContent('1');\n  });\n\n  it('should decrease counter', () =\u003e {\n    renderWithStore(\u003cCounter /\u003e, { initialState: 0 });\n\n    user.click(screen.getByText(/decrease/i));\n\n    expect(screen.getByTestId('count')).toHaveTextContent('-1');\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"a18fa","text":"renderWithStore should be moved to a separate file and used in other tests where we interact with Redux.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:14.283+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":832,"position":8,"new_position":8,"published_attributes":{"type":"slide","answers":[],"title":"Exercise","body":null,"serialized_body":"\u003cp\u003eUse User component and assert that it renders name and email from Redux State. Use renderWithStore helper. For the reducer  in renderWithStore use state =\u0026gt; state since we won\u0026#x27;t dispatch any actions here.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003e/* User.js */\nimport { useSelector } from \u0026#x27;react-redux\u0026#x27;;\n\nconst User = () =\u0026gt; {\n  const user = useSelector((state) =\u0026gt; state.user);\n\n  return (\n    \u0026lt;\u0026gt;\n      \u0026lt;span data-testid=\u0026quot;name\u0026quot;\u0026gt;{user.name}\u0026lt;/span\u0026gt;\n      \u0026lt;span data-testid=\u0026quot;email\u0026quot;\u0026gt;{user.email}\u0026lt;/span\u0026gt;\n    \u0026lt;/\u0026gt;\n  );\n};\n\nexport default User;\n/* User.test.js */\nimport { render, screen } from \u0026#x27;@testing-library/react\u0026#x27;;\nimport userUtils from \u0026#x27;@testing-library/user-event\u0026#x27;;\n\nimport renderWithStore from \u0026#x27;./renderWithStore\u0026#x27;;\nimport User from \u0026#x27;./User\u0026#x27;;\n\ndescribe(\u0026#x27;User\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should display name\u0026#x27;, () =\u0026gt; {\n\n  });\n\n  it(\u0026#x27;should display email\u0026#x27;, () =\u0026gt; {\n    \n  });\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"77nib","text":"Use User component and assert that it renders name and email from Redux State. Use renderWithStore helper. For the reducer  in renderWithStore use state =\u003e state since we won't dispatch any actions here.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ea7s8","text":"/* User.js */\nimport { useSelector } from 'react-redux';\n\nconst User = () =\u003e {\n  const user = useSelector((state) =\u003e state.user);\n\n  return (\n    \u003c\u003e\n      \u003cspan data-testid=\"name\"\u003e{user.name}\u003c/span\u003e\n      \u003cspan data-testid=\"email\"\u003e{user.email}\u003c/span\u003e\n    \u003c/\u003e\n  );\n};\n\nexport default User;\n/* User.test.js */\nimport { render, screen } from '@testing-library/react';\nimport userUtils from '@testing-library/user-event';\n\nimport renderWithStore from './renderWithStore';\nimport User from './User';\n\ndescribe('User', () =\u003e {\n  it('should display name', () =\u003e {\n\n  });\n\n  it('should display email', () =\u003e {\n    \n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Exercise","body":null,"serialized_body":"\u003cp\u003eUse User component and assert that it renders name and email from Redux State. Use renderWithStore helper. For the reducer  in renderWithStore use state =\u0026gt; state since we won\u0026#x27;t dispatch any actions here.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003e/* User.js */\nimport { useSelector } from \u0026#x27;react-redux\u0026#x27;;\n\nconst User = () =\u0026gt; {\n  const user = useSelector((state) =\u0026gt; state.user);\n\n  return (\n    \u0026lt;\u0026gt;\n      \u0026lt;span data-testid=\u0026quot;name\u0026quot;\u0026gt;{user.name}\u0026lt;/span\u0026gt;\n      \u0026lt;span data-testid=\u0026quot;email\u0026quot;\u0026gt;{user.email}\u0026lt;/span\u0026gt;\n    \u0026lt;/\u0026gt;\n  );\n};\n\nexport default User;\n/* User.test.js */\nimport { render, screen } from \u0026#x27;@testing-library/react\u0026#x27;;\nimport userUtils from \u0026#x27;@testing-library/user-event\u0026#x27;;\n\nimport renderWithStore from \u0026#x27;./renderWithStore\u0026#x27;;\nimport User from \u0026#x27;./User\u0026#x27;;\n\ndescribe(\u0026#x27;User\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should display name\u0026#x27;, () =\u0026gt; {\n\n  });\n\n  it(\u0026#x27;should display email\u0026#x27;, () =\u0026gt; {\n    \n  });\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"77nib","text":"Use User component and assert that it renders name and email from Redux State. Use renderWithStore helper. For the reducer  in renderWithStore use state =\u003e state since we won't dispatch any actions here.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ea7s8","text":"/* User.js */\nimport { useSelector } from 'react-redux';\n\nconst User = () =\u003e {\n  const user = useSelector((state) =\u003e state.user);\n\n  return (\n    \u003c\u003e\n      \u003cspan data-testid=\"name\"\u003e{user.name}\u003c/span\u003e\n      \u003cspan data-testid=\"email\"\u003e{user.email}\u003c/span\u003e\n    \u003c/\u003e\n  );\n};\n\nexport default User;\n/* User.test.js */\nimport { render, screen } from '@testing-library/react';\nimport userUtils from '@testing-library/user-event';\n\nimport renderWithStore from './renderWithStore';\nimport User from './User';\n\ndescribe('User', () =\u003e {\n  it('should display name', () =\u003e {\n\n  });\n\n  it('should display email', () =\u003e {\n    \n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:14.283+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]}],"attachments":[]}