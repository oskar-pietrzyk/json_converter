{"id":86,"title":"Testing React Components that use React Router","estimated_time":11,"user_id":null,"passing_threshold":80,"published_at":"2021-01-18T11:54:29.100+01:00","has_unpublished_changes":false,"has_certificate":false,"external_id":null,"draft_external_id":null,"external_status":"inapplicable","course_type":"bridge","enrollments_count":4,"domain_id":1,"sub_account_id":1,"open_book":null,"description":null,"third_party_course_id":null,"external_course_id":null,"quizzes_count":0,"external_status_message":null,"manual_estimated_time":false,"show_correct_response":true,"max_quiz_attempts":null,"continuing_education_credits":null,"archived_at":null,"config":{},"unpublished_at":null,"external_learning_standard":null,"available_offline":false,"external_version":null,"ordered_slides":[{"id":811,"position":1,"new_position":1,"published_attributes":{"type":"slide","title":"Trying to render Link component","body":null,"serialized_body":"\u003cp\u003eThe common problem with testing React Apps is that sometimes when test our component which uses some external package we start having errors in tests. Even if we don\u0026#x27;t plan to test this package we are unable to just simply render a component. One of those packages is React Router.\u003c/p\u003e\u003ch2\u003e\u003cstrong\u003eRendering Link component\u003c/strong\u003e\u003c/h2\u003e\u003cp\u003eLet\u0026#x27;s try rendering a component containing Link from react-router-dom.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { Link } from \u0026#x27;react-router-dom\u0026#x27;;\n\nconst Component = () =\u0026gt; \u0026lt;Link to=\u0026quot;/\u0026quot; /\u0026gt;;\n\nexport default Component;\nimport { render, screen } from \u0026#x27;@testing-library/react\u0026#x27;;\n\nimport Component from \u0026#x27;./ComponentReactRouter\u0026#x27;;\n\ndescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should render\u0026#x27;, () =\u0026gt; {\n    render(\u0026lt;Component /\u0026gt;);\n\n    screen.debug();\n  });\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhen we run it we will quickly see an error in console:\u003c/p\u003e\u003cimg src=\"https://cdn.dub.bridgeapp.com/512/1/uploads/f8f8126e-4210-4507-b75e-9179ae138a52.png?response-content-disposition=attachment%3Bfilename%3DUntitled+%282%29+%281%29.png\u0026amp;Expires=1606742119\u0026amp;Signature=gGtrBWicj1E4m2Wmm-fb6rFggvrL0qf9yOcFFN1YqUxJFAmMsvJg0QRxqRfFjGPpRJ~7WU5tHv2IWyr8-nPDkgLBFl1zxezss6H4VbEyeLd3hiIU5jF34qUxBfUP3322tadYC5brSzhM9GlvAskOyXqX8ARO6Mkv1N8dbVGIK63uqCA67fuMf-3tIZ2ar6V~AYHfLjuY7ADhtv1boJpUg7dkT1xTKsxkQQb0ZQOSPGans6zzla0LGI2j2GByypf0fJUYdYEI6qXQjovJxMa5lWKcjdQjZ7cSc5EudeBYTTOg0mUPTVdLEr~AyRw-8U1dsY0mFh39W0173KKT4uBpLA__\u0026amp;Key-Pair-Id=APKAJXAC3ZZLINBJN2EQ\"/\u003e\u003cp\u003e\u003c/p\u003e","structured_body":{"blocks":[{"key":"4qjhe","text":"The common problem with testing React Apps is that sometimes when test our component which uses some external package we start having errors in tests. Even if we don't plan to test this package we are unable to just simply render a component. One of those packages is React Router.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{"entityRefreshHax":1}},{"key":"6tkr2","text":"Rendering Link component","type":"header-two","depth":0,"inlineStyleRanges":[{"offset":0,"length":24,"style":"BOLD"}],"entityRanges":[],"data":{}},{"key":"lg7u","text":"Let's try rendering a component containing Link from react-router-dom.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"f3vhh","text":"import { Link } from 'react-router-dom';\n\nconst Component = () =\u003e \u003cLink to=\"/\" /\u003e;\n\nexport default Component;\nimport { render, screen } from '@testing-library/react';\n\nimport Component from './ComponentReactRouter';\n\ndescribe('Component', () =\u003e {\n  it('should render', () =\u003e {\n    render(\u003cComponent /\u003e);\n\n    screen.debug();\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"no77","text":"When we run it we will quickly see an error in console:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9j28c","text":" ","type":"atomic","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":0,"length":1,"key":0}],"data":{}},{"key":"1foe1","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{"0":{"type":"image","mutability":"IMMUTABLE","data":{"uploadId":null,"src":"https://cdn.dub.bridgeapp.com/512/1/uploads/f8f8126e-4210-4507-b75e-9179ae138a52.png?response-content-disposition=attachment%3Bfilename%3DUntitled+%282%29+%281%29.png\u0026Expires=1606742119\u0026Signature=gGtrBWicj1E4m2Wmm-fb6rFggvrL0qf9yOcFFN1YqUxJFAmMsvJg0QRxqRfFjGPpRJ~7WU5tHv2IWyr8-nPDkgLBFl1zxezss6H4VbEyeLd3hiIU5jF34qUxBfUP3322tadYC5brSzhM9GlvAskOyXqX8ARO6Mkv1N8dbVGIK63uqCA67fuMf-3tIZ2ar6V~AYHfLjuY7ADhtv1boJpUg7dkT1xTKsxkQQb0ZQOSPGans6zzla0LGI2j2GByypf0fJUYdYEI6qXQjovJxMa5lWKcjdQjZ7cSc5EudeBYTTOg0mUPTVdLEr~AyRw-8U1dsY0mFh39W0173KKT4uBpLA__\u0026Key-Pair-Id=APKAJXAC3ZZLINBJN2EQ","attachmentId":"1746"}}}},"answers":[],"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","title":"Trying to render Link component","body":null,"serialized_body":"\u003cp\u003eThe common problem with testing React Apps is that sometimes when test our component which uses some external package we start having errors in tests. Even if we don\u0026#x27;t plan to test this package we are unable to just simply render a component. One of those packages is React Router.\u003c/p\u003e\u003ch2\u003e\u003cstrong\u003eRendering Link component\u003c/strong\u003e\u003c/h2\u003e\u003cp\u003eLet\u0026#x27;s try rendering a component containing Link from react-router-dom.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { Link } from \u0026#x27;react-router-dom\u0026#x27;;\n\nconst Component = () =\u0026gt; \u0026lt;Link to=\u0026quot;/\u0026quot; /\u0026gt;;\n\nexport default Component;\nimport { render, screen } from \u0026#x27;@testing-library/react\u0026#x27;;\n\nimport Component from \u0026#x27;./ComponentReactRouter\u0026#x27;;\n\ndescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should render\u0026#x27;, () =\u0026gt; {\n    render(\u0026lt;Component /\u0026gt;);\n\n    screen.debug();\n  });\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhen we run it we will quickly see an error in console:\u003c/p\u003e\u003cimg src=\"https://cdn.dub.bridgeapp.com/512/1/uploads/f8f8126e-4210-4507-b75e-9179ae138a52.png?response-content-disposition=attachment%3Bfilename%3DUntitled+%282%29+%281%29.png\u0026amp;Expires=1606742119\u0026amp;Signature=gGtrBWicj1E4m2Wmm-fb6rFggvrL0qf9yOcFFN1YqUxJFAmMsvJg0QRxqRfFjGPpRJ~7WU5tHv2IWyr8-nPDkgLBFl1zxezss6H4VbEyeLd3hiIU5jF34qUxBfUP3322tadYC5brSzhM9GlvAskOyXqX8ARO6Mkv1N8dbVGIK63uqCA67fuMf-3tIZ2ar6V~AYHfLjuY7ADhtv1boJpUg7dkT1xTKsxkQQb0ZQOSPGans6zzla0LGI2j2GByypf0fJUYdYEI6qXQjovJxMa5lWKcjdQjZ7cSc5EudeBYTTOg0mUPTVdLEr~AyRw-8U1dsY0mFh39W0173KKT4uBpLA__\u0026amp;Key-Pair-Id=APKAJXAC3ZZLINBJN2EQ\"/\u003e\u003cp\u003e\u003c/p\u003e","structured_body":{"blocks":[{"key":"4qjhe","text":"The common problem with testing React Apps is that sometimes when test our component which uses some external package we start having errors in tests. Even if we don't plan to test this package we are unable to just simply render a component. One of those packages is React Router.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{"entityRefreshHax":1}},{"key":"6tkr2","text":"Rendering Link component","type":"header-two","depth":0,"inlineStyleRanges":[{"offset":0,"length":24,"style":"BOLD"}],"entityRanges":[],"data":{}},{"key":"lg7u","text":"Let's try rendering a component containing Link from react-router-dom.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"f3vhh","text":"import { Link } from 'react-router-dom';\n\nconst Component = () =\u003e \u003cLink to=\"/\" /\u003e;\n\nexport default Component;\nimport { render, screen } from '@testing-library/react';\n\nimport Component from './ComponentReactRouter';\n\ndescribe('Component', () =\u003e {\n  it('should render', () =\u003e {\n    render(\u003cComponent /\u003e);\n\n    screen.debug();\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"no77","text":"When we run it we will quickly see an error in console:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9j28c","text":" ","type":"atomic","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":0,"length":1,"key":0}],"data":{}},{"key":"1foe1","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{"0":{"type":"image","mutability":"IMMUTABLE","data":{"uploadId":null,"src":"https://cdn.dub.bridgeapp.com/512/1/uploads/f8f8126e-4210-4507-b75e-9179ae138a52.png?response-content-disposition=attachment%3Bfilename%3DUntitled+%282%29+%281%29.png\u0026Expires=1606742119\u0026Signature=gGtrBWicj1E4m2Wmm-fb6rFggvrL0qf9yOcFFN1YqUxJFAmMsvJg0QRxqRfFjGPpRJ~7WU5tHv2IWyr8-nPDkgLBFl1zxezss6H4VbEyeLd3hiIU5jF34qUxBfUP3322tadYC5brSzhM9GlvAskOyXqX8ARO6Mkv1N8dbVGIK63uqCA67fuMf-3tIZ2ar6V~AYHfLjuY7ADhtv1boJpUg7dkT1xTKsxkQQb0ZQOSPGans6zzla0LGI2j2GByypf0fJUYdYEI6qXQjovJxMa5lWKcjdQjZ7cSc5EudeBYTTOg0mUPTVdLEr~AyRw-8U1dsY0mFh39W0173KKT4uBpLA__\u0026Key-Pair-Id=APKAJXAC3ZZLINBJN2EQ","attachmentId":"1746"}}}},"answers":[],"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:29.100+01:00","estimated_time":1,"attachments_count":1,"presentable":true,"external_id":null,"attachments":[{"id":1746,"notorious_id":null,"location":"https://s3-eu-west-1.amazonaws.com/bridge-learn-file-store-prod-dub/512/1/uploads/f8f8126e-4210-4507-b75e-9179ae138a52.png","duration":null,"name":"Untitled (2) (1).png","learner_visible":true,"confirmed":false,"user_id":457,"context_type":"Slide","content_type":"image/png","file_modified_at":null,"availability":"complete","media":null,"migrated_at":null,"sources":[]}]},{"id":812,"position":2,"new_position":2,"published_attributes":{"type":"slide","answers":[],"title":"Wrapping component with Router","body":null,"serialized_body":"\u003cp\u003eLet\u0026#x27;s do what error message suggests and wrap it in Router. We will use MemoryRouter for that.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003erender(\n  \u0026lt;MemoryRouter\u0026gt;\n    \u0026lt;Component /\u0026gt;\n  \u0026lt;/MemoryRouter\u0026gt;\n);\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow the test passes successfully. Unfortunately now every time you want to test this component you need to include MemoryRouter. There are 2 solutions to this problem.\n\u003c/p\u003e","structured_body":{"blocks":[{"key":"5f2m8","text":"Let's do what error message suggests and wrap it in Router. We will use MemoryRouter for that.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7o4re","text":"render(\n  \u003cMemoryRouter\u003e\n    \u003cComponent /\u003e\n  \u003c/MemoryRouter\u003e\n);","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"et0qj","text":"Now the test passes successfully. Unfortunately now every time you want to test this component you need to include MemoryRouter. There are 2 solutions to this problem.\n","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Wrapping component with Router","body":null,"serialized_body":"\u003cp\u003eLet\u0026#x27;s do what error message suggests and wrap it in Router. We will use MemoryRouter for that.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003erender(\n  \u0026lt;MemoryRouter\u0026gt;\n    \u0026lt;Component /\u0026gt;\n  \u0026lt;/MemoryRouter\u0026gt;\n);\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow the test passes successfully. Unfortunately now every time you want to test this component you need to include MemoryRouter. There are 2 solutions to this problem.\n\u003c/p\u003e","structured_body":{"blocks":[{"key":"5f2m8","text":"Let's do what error message suggests and wrap it in Router. We will use MemoryRouter for that.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7o4re","text":"render(\n  \u003cMemoryRouter\u003e\n    \u003cComponent /\u003e\n  \u003c/MemoryRouter\u003e\n);","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"et0qj","text":"Now the test passes successfully. Unfortunately now every time you want to test this component you need to include MemoryRouter. There are 2 solutions to this problem.\n","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:29.100+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":813,"position":3,"new_position":3,"published_attributes":{"type":"slide","answers":[],"title":"Better solutions for wrapping component with Router","body":null,"serialized_body":"\u003cp\u003eYou can create a separate component which has MemoryRouter included and use it in every test.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003econst ComponentWithRouter = (props) =\u0026gt; (\n  \u0026lt;MemoryRouter\u0026gt;\n    \u0026lt;Component {...props} /\u0026gt;\n  \u0026lt;/MemoryRouter\u0026gt;\n);\n\ndescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should render\u0026#x27;, () =\u0026gt; {\n    render(\u0026lt;ComponentWithRouter /\u0026gt;);\n\n    screen.debug();\n  });\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOr you can simply use option of render function and add MemoryRouter as wrapper.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should render\u0026#x27;, () =\u0026gt; {\n  render(\u0026lt;Component /\u0026gt;, { wrapper: MemoryRouter });\n\n  screen.debug();\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"d0f4","text":"You can create a separate component which has MemoryRouter included and use it in every test.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6hcjv","text":"const ComponentWithRouter = (props) =\u003e (\n  \u003cMemoryRouter\u003e\n    \u003cComponent {...props} /\u003e\n  \u003c/MemoryRouter\u003e\n);\n\ndescribe('Component', () =\u003e {\n  it('should render', () =\u003e {\n    render(\u003cComponentWithRouter /\u003e);\n\n    screen.debug();\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6ibmq","text":"Or you can simply use option of render function and add MemoryRouter as wrapper.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1g8qm","text":"it('should render', () =\u003e {\n  render(\u003cComponent /\u003e, { wrapper: MemoryRouter });\n\n  screen.debug();\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Better solutions for wrapping component with Router","body":null,"serialized_body":"\u003cp\u003eYou can create a separate component which has MemoryRouter included and use it in every test.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003econst ComponentWithRouter = (props) =\u0026gt; (\n  \u0026lt;MemoryRouter\u0026gt;\n    \u0026lt;Component {...props} /\u0026gt;\n  \u0026lt;/MemoryRouter\u0026gt;\n);\n\ndescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should render\u0026#x27;, () =\u0026gt; {\n    render(\u0026lt;ComponentWithRouter /\u0026gt;);\n\n    screen.debug();\n  });\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOr you can simply use option of render function and add MemoryRouter as wrapper.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should render\u0026#x27;, () =\u0026gt; {\n  render(\u0026lt;Component /\u0026gt;, { wrapper: MemoryRouter });\n\n  screen.debug();\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"d0f4","text":"You can create a separate component which has MemoryRouter included and use it in every test.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6hcjv","text":"const ComponentWithRouter = (props) =\u003e (\n  \u003cMemoryRouter\u003e\n    \u003cComponent {...props} /\u003e\n  \u003c/MemoryRouter\u003e\n);\n\ndescribe('Component', () =\u003e {\n  it('should render', () =\u003e {\n    render(\u003cComponentWithRouter /\u003e);\n\n    screen.debug();\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6ibmq","text":"Or you can simply use option of render function and add MemoryRouter as wrapper.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1g8qm","text":"it('should render', () =\u003e {\n  render(\u003cComponent /\u003e, { wrapper: MemoryRouter });\n\n  screen.debug();\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:29.100+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":814,"position":4,"new_position":4,"published_attributes":{"type":"slide","answers":[],"title":"Creating component to test interactions","body":null,"serialized_body":"\u003cp\u003eNow let\u0026#x27;s test a component which does slightly more.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003econst Component = ({ isLoggedIn, ComponentToRender, ...props }) =\u0026gt; {\n  if (isLoggedIn) {\n    return \u0026lt;ComponentToRender {...props} /\u0026gt;;\n  }\n\n  return \u0026lt;Redirect to=\u0026quot;/login\u0026quot; /\u0026gt;;\n};\n\nexport default Component;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt renders the provided component if user is logged in or else redirects to log in.\n\u003c/p\u003e","structured_body":{"blocks":[{"key":"98jg7","text":"Now let's test a component which does slightly more.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dhhr","text":"const Component = ({ isLoggedIn, ComponentToRender, ...props }) =\u003e {\n  if (isLoggedIn) {\n    return \u003cComponentToRender {...props} /\u003e;\n  }\n\n  return \u003cRedirect to=\"/login\" /\u003e;\n};\n\nexport default Component;","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4vr1v","text":"It renders the provided component if user is logged in or else redirects to log in.\n","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Creating component to test interactions","body":null,"serialized_body":"\u003cp\u003eNow let\u0026#x27;s test a component which does slightly more.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003econst Component = ({ isLoggedIn, ComponentToRender, ...props }) =\u0026gt; {\n  if (isLoggedIn) {\n    return \u0026lt;ComponentToRender {...props} /\u0026gt;;\n  }\n\n  return \u0026lt;Redirect to=\u0026quot;/login\u0026quot; /\u0026gt;;\n};\n\nexport default Component;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt renders the provided component if user is logged in or else redirects to log in.\n\u003c/p\u003e","structured_body":{"blocks":[{"key":"98jg7","text":"Now let's test a component which does slightly more.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dhhr","text":"const Component = ({ isLoggedIn, ComponentToRender, ...props }) =\u003e {\n  if (isLoggedIn) {\n    return \u003cComponentToRender {...props} /\u003e;\n  }\n\n  return \u003cRedirect to=\"/login\" /\u003e;\n};\n\nexport default Component;","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4vr1v","text":"It renders the provided component if user is logged in or else redirects to log in.\n","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:29.100+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":815,"position":5,"new_position":5,"published_attributes":{"type":"slide","answers":[],"title":"Setting up tests for interactions with history","body":null,"serialized_body":"\u003cp\u003eHere is what we will test\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003edescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should render component if isLoggedIn is true\u0026#x27;, () =\u0026gt; {\n\n  });\n\n  it(\u0026#x27;should redirect to login if isLoggedIn is false\u0026#x27;, () =\u0026gt; {\n\n  });\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"de5fd","text":"Here is what we will test","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3u5ha","text":"describe('Component', () =\u003e {\n  it('should render component if isLoggedIn is true', () =\u003e {\n\n  });\n\n  it('should redirect to login if isLoggedIn is false', () =\u003e {\n\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Setting up tests for interactions with history","body":null,"serialized_body":"\u003cp\u003eHere is what we will test\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003edescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should render component if isLoggedIn is true\u0026#x27;, () =\u0026gt; {\n\n  });\n\n  it(\u0026#x27;should redirect to login if isLoggedIn is false\u0026#x27;, () =\u0026gt; {\n\n  });\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"de5fd","text":"Here is what we will test","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3u5ha","text":"describe('Component', () =\u003e {\n  it('should render component if isLoggedIn is true', () =\u003e {\n\n  });\n\n  it('should redirect to login if isLoggedIn is false', () =\u003e {\n\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:29.100+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":816,"position":6,"new_position":6,"published_attributes":{"type":"slide","answers":[],"title":"First test - rendering provided component","body":null,"serialized_body":"\u003cp\u003eTo test this path we need to add isLoggedIn={true} prop to component and check if it rendered the component we provided as ComponentToRender.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should render component if isLoggedIn is true\u0026#x27;, () =\u0026gt; {\n  const TestComponent = () =\u0026gt; \u0026lt;span data-testid=\u0026quot;test\u0026quot; /\u0026gt;;\n\n  render(\u0026lt;Component isLoggedIn ComponentToRender={TestComponent} /\u0026gt;);\n\n  expect(screen.getByTestId(\u0026#x27;test\u0026#x27;)).toBeTruthy();\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNothing new here. We didn\u0026#x27;t need to use Router because the component in this state didn\u0026#x27;t returned anything related to react-router.\u003c/p\u003e","structured_body":{"blocks":[{"key":"c2gs7","text":"To test this path we need to add isLoggedIn={true} prop to component and check if it rendered the component we provided as ComponentToRender.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"elkgc","text":"it('should render component if isLoggedIn is true', () =\u003e {\n  const TestComponent = () =\u003e \u003cspan data-testid=\"test\" /\u003e;\n\n  render(\u003cComponent isLoggedIn ComponentToRender={TestComponent} /\u003e);\n\n  expect(screen.getByTestId('test')).toBeTruthy();\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"aipvm","text":"Nothing new here. We didn't need to use Router because the component in this state didn't returned anything related to react-router.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"First test - rendering provided component","body":null,"serialized_body":"\u003cp\u003eTo test this path we need to add isLoggedIn={true} prop to component and check if it rendered the component we provided as ComponentToRender.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should render component if isLoggedIn is true\u0026#x27;, () =\u0026gt; {\n  const TestComponent = () =\u0026gt; \u0026lt;span data-testid=\u0026quot;test\u0026quot; /\u0026gt;;\n\n  render(\u0026lt;Component isLoggedIn ComponentToRender={TestComponent} /\u0026gt;);\n\n  expect(screen.getByTestId(\u0026#x27;test\u0026#x27;)).toBeTruthy();\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNothing new here. We didn\u0026#x27;t need to use Router because the component in this state didn\u0026#x27;t returned anything related to react-router.\u003c/p\u003e","structured_body":{"blocks":[{"key":"c2gs7","text":"To test this path we need to add isLoggedIn={true} prop to component and check if it rendered the component we provided as ComponentToRender.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"elkgc","text":"it('should render component if isLoggedIn is true', () =\u003e {\n  const TestComponent = () =\u003e \u003cspan data-testid=\"test\" /\u003e;\n\n  render(\u003cComponent isLoggedIn ComponentToRender={TestComponent} /\u003e);\n\n  expect(screen.getByTestId('test')).toBeTruthy();\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"aipvm","text":"Nothing new here. We didn't need to use Router because the component in this state didn't returned anything related to react-router.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:29.100+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":817,"position":7,"new_position":7,"published_attributes":{"type":"slide","answers":[],"title":"Second test - rendering component with Router","body":null,"serialized_body":"\u003cp\u003eNow we want to check if user who is not logged in was redirected to `login\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { Router } from \u0026#x27;react-router-dom\u0026#x27;;\nimport { createMemoryHistory } from \u0026#x27;history\u0026#x27;;\n\n...\n\nit(\u0026#x27;should redirect to login if isLoggedIn is false\u0026#x27;, () =\u0026gt; {\n  const history = createMemoryHistory();\n\n  render(\n    \u0026lt;Router history={history}\u0026gt;\n      \u0026lt;Component isLoggedIn={false} /\u0026gt;\n    \u0026lt;/Router\u0026gt;\n  );\n\n  expect(history.location.pathname).toBe(\u0026#x27;/login\u0026#x27;);\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eInstead of using MemoryRouter,  we created our own history. After we render the component we can access and assert the location.\u003c/p\u003e\u003cp\u003eHere we also see the same issue as when we rendered Link component. Every time we need to access the location we need to create a history and wrap the component with Router. There is a smarter way.\u003c/p\u003e","structured_body":{"blocks":[{"key":"2qn4a","text":"Now we want to check if user who is not logged in was redirected to `login","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"empsv","text":"import { Router } from 'react-router-dom';\nimport { createMemoryHistory } from 'history';\n\n...\n\nit('should redirect to login if isLoggedIn is false', () =\u003e {\n  const history = createMemoryHistory();\n\n  render(\n    \u003cRouter history={history}\u003e\n      \u003cComponent isLoggedIn={false} /\u003e\n    \u003c/Router\u003e\n  );\n\n  expect(history.location.pathname).toBe('/login');\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4mlsd","text":"Instead of using MemoryRouter,  we created our own history. After we render the component we can access and assert the location.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bnres","text":"Here we also see the same issue as when we rendered Link component. Every time we need to access the location we need to create a history and wrap the component with Router. There is a smarter way.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Second test - rendering component with Router","body":null,"serialized_body":"\u003cp\u003eNow we want to check if user who is not logged in was redirected to `login\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { Router } from \u0026#x27;react-router-dom\u0026#x27;;\nimport { createMemoryHistory } from \u0026#x27;history\u0026#x27;;\n\n...\n\nit(\u0026#x27;should redirect to login if isLoggedIn is false\u0026#x27;, () =\u0026gt; {\n  const history = createMemoryHistory();\n\n  render(\n    \u0026lt;Router history={history}\u0026gt;\n      \u0026lt;Component isLoggedIn={false} /\u0026gt;\n    \u0026lt;/Router\u0026gt;\n  );\n\n  expect(history.location.pathname).toBe(\u0026#x27;/login\u0026#x27;);\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eInstead of using MemoryRouter,  we created our own history. After we render the component we can access and assert the location.\u003c/p\u003e\u003cp\u003eHere we also see the same issue as when we rendered Link component. Every time we need to access the location we need to create a history and wrap the component with Router. There is a smarter way.\u003c/p\u003e","structured_body":{"blocks":[{"key":"2qn4a","text":"Now we want to check if user who is not logged in was redirected to `login","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"empsv","text":"import { Router } from 'react-router-dom';\nimport { createMemoryHistory } from 'history';\n\n...\n\nit('should redirect to login if isLoggedIn is false', () =\u003e {\n  const history = createMemoryHistory();\n\n  render(\n    \u003cRouter history={history}\u003e\n      \u003cComponent isLoggedIn={false} /\u003e\n    \u003c/Router\u003e\n  );\n\n  expect(history.location.pathname).toBe('/login');\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4mlsd","text":"Instead of using MemoryRouter,  we created our own history. After we render the component we can access and assert the location.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bnres","text":"Here we also see the same issue as when we rendered Link component. Every time we need to access the location we need to create a history and wrap the component with Router. There is a smarter way.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:29.100+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":819,"position":8,"new_position":8,"published_attributes":{"type":"slide","answers":[],"title":"Creating renderWithRouter function","body":null,"serialized_body":"\u003cp\u003eIt\u0026#x27;s a common practice to enhance the standard render function from @testing-library/react with custom functionalities. In our case we need a possibility to render a component inside router and access the current history.\u003c/p\u003e\u003cp\u003eLet\u0026#x27;s create a custom render function.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003econst renderWithRouter = (ui, options) =\u0026gt; {\n  const history = createMemoryHistory();\n\n  const Wrapper = ({ children }) =\u0026gt; (\n    \u0026lt;Router history={history}\u0026gt;{children}\u0026lt;/Router\u0026gt;\n  );\n\n  const result = render(ui, {\n    wrapper: Wrapper,\n    ...options,\n  });\n\n  return { ...result, history };\n};\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis custom render will create a history and a wrapper with Router. It renders the component with our options and a custom wrapper.\u003c/p\u003e\u003cp\u003eOther than that it will return this history so we can access it during our tests.\u003c/p\u003e\u003cp\u003eIt looks complicated, but becomes more clear when we use it.\u003c/p\u003e","structured_body":{"blocks":[{"key":"entbi","text":"It's a common practice to enhance the standard render function from @testing-library/react with custom functionalities. In our case we need a possibility to render a component inside router and access the current history.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"52kg9","text":"Let's create a custom render function.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4agqo","text":"const renderWithRouter = (ui, options) =\u003e {\n  const history = createMemoryHistory();\n\n  const Wrapper = ({ children }) =\u003e (\n    \u003cRouter history={history}\u003e{children}\u003c/Router\u003e\n  );\n\n  const result = render(ui, {\n    wrapper: Wrapper,\n    ...options,\n  });\n\n  return { ...result, history };\n};","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dkgff","text":"This custom render will create a history and a wrapper with Router. It renders the component with our options and a custom wrapper.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"180m5","text":"Other than that it will return this history so we can access it during our tests.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"vfh2","text":"It looks complicated, but becomes more clear when we use it.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Creating renderWithRouter function","body":null,"serialized_body":"\u003cp\u003eIt\u0026#x27;s a common practice to enhance the standard render function from @testing-library/react with custom functionalities. In our case we need a possibility to render a component inside router and access the current history.\u003c/p\u003e\u003cp\u003eLet\u0026#x27;s create a custom render function.\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003econst renderWithRouter = (ui, options) =\u0026gt; {\n  const history = createMemoryHistory();\n\n  const Wrapper = ({ children }) =\u0026gt; (\n    \u0026lt;Router history={history}\u0026gt;{children}\u0026lt;/Router\u0026gt;\n  );\n\n  const result = render(ui, {\n    wrapper: Wrapper,\n    ...options,\n  });\n\n  return { ...result, history };\n};\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis custom render will create a history and a wrapper with Router. It renders the component with our options and a custom wrapper.\u003c/p\u003e\u003cp\u003eOther than that it will return this history so we can access it during our tests.\u003c/p\u003e\u003cp\u003eIt looks complicated, but becomes more clear when we use it.\u003c/p\u003e","structured_body":{"blocks":[{"key":"entbi","text":"It's a common practice to enhance the standard render function from @testing-library/react with custom functionalities. In our case we need a possibility to render a component inside router and access the current history.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"52kg9","text":"Let's create a custom render function.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4agqo","text":"const renderWithRouter = (ui, options) =\u003e {\n  const history = createMemoryHistory();\n\n  const Wrapper = ({ children }) =\u003e (\n    \u003cRouter history={history}\u003e{children}\u003c/Router\u003e\n  );\n\n  const result = render(ui, {\n    wrapper: Wrapper,\n    ...options,\n  });\n\n  return { ...result, history };\n};","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dkgff","text":"This custom render will create a history and a wrapper with Router. It renders the component with our options and a custom wrapper.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"180m5","text":"Other than that it will return this history so we can access it during our tests.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"vfh2","text":"It looks complicated, but becomes more clear when we use it.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:29.100+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":820,"position":9,"new_position":9,"published_attributes":{"type":"slide","answers":[],"title":"Using renderWithRouter function","body":null,"serialized_body":"\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should redirect to login if isLoggedIn is false\u0026#x27;, () =\u0026gt; {\n  const { history } = renderWithRouter(\u0026lt;Component isLoggedIn={false} /\u0026gt;);\n\n  expect(history.location.pathname).toBe(\u0026#x27;/login\u0026#x27;);\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs you can see our tests became shorter. We eliminated the boilerplate needed to check the location.\u003c/p\u003e\u003cp\u003erenderWithRouter can be moved to a separate file and used in tests across your application.\u003c/p\u003e","structured_body":{"blocks":[{"key":"e2dgp","text":"it('should redirect to login if isLoggedIn is false', () =\u003e {\n  const { history } = renderWithRouter(\u003cComponent isLoggedIn={false} /\u003e);\n\n  expect(history.location.pathname).toBe('/login');\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9vf8o","text":"As you can see our tests became shorter. We eliminated the boilerplate needed to check the location.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5s0fa","text":"renderWithRouter can be moved to a separate file and used in tests across your application.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Using renderWithRouter function","body":null,"serialized_body":"\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eit(\u0026#x27;should redirect to login if isLoggedIn is false\u0026#x27;, () =\u0026gt; {\n  const { history } = renderWithRouter(\u0026lt;Component isLoggedIn={false} /\u0026gt;);\n\n  expect(history.location.pathname).toBe(\u0026#x27;/login\u0026#x27;);\n});\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs you can see our tests became shorter. We eliminated the boilerplate needed to check the location.\u003c/p\u003e\u003cp\u003erenderWithRouter can be moved to a separate file and used in tests across your application.\u003c/p\u003e","structured_body":{"blocks":[{"key":"e2dgp","text":"it('should redirect to login if isLoggedIn is false', () =\u003e {\n  const { history } = renderWithRouter(\u003cComponent isLoggedIn={false} /\u003e);\n\n  expect(history.location.pathname).toBe('/login');\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9vf8o","text":"As you can see our tests became shorter. We eliminated the boilerplate needed to check the location.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5s0fa","text":"renderWithRouter can be moved to a separate file and used in tests across your application.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:29.100+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":821,"position":10,"new_position":10,"published_attributes":{"type":"slide","answers":[],"title":"Full code snippet","body":null,"serialized_body":"\u003cp\u003eHere is a full code snippet:\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { render, screen } from \u0026#x27;@testing-library/react\u0026#x27;;\nimport { Router } from \u0026#x27;react-router-dom\u0026#x27;;\nimport { createMemoryHistory } from \u0026#x27;history\u0026#x27;;\n\nimport Component from \u0026#x27;./ComponentReactRouter\u0026#x27;;\n\nconst renderWithRouter = (ui, options) =\u0026gt; {\n  const history = createMemoryHistory();\n\n  const Wrapper = ({ children }) =\u0026gt; (\n    \u0026lt;Router history={history}\u0026gt;{children}\u0026lt;/Router\u0026gt;\n  );\n\n  const result = render(ui, {\n    wrapper: Wrapper,\n    ...options,\n  });\n\n  return { ...result, history };\n};\n\ndescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should render component if isLoggedIn is true\u0026#x27;, () =\u0026gt; {\n    const TestComponent = () =\u0026gt; \u0026lt;span\u0026gt;test\u0026lt;/span\u0026gt;;\n\n    render(\u0026lt;Component isLoggedIn ComponentToRender={TestComponent} /\u0026gt;);\n\n    expect(screen.getByText(\u0026#x27;test\u0026#x27;)).toBeTruthy();\n  });\n\n  it(\u0026#x27;should redirect to login if isLoggedIn is false\u0026#x27;, () =\u0026gt; {\n    const { history } = renderWithRouter(\u0026lt;Component isLoggedIn={false} /\u0026gt;);\n\n    expect(history.location.pathname).toBe(\u0026#x27;/login\u0026#x27;);\n  });\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"6j23","text":"Here is a full code snippet:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"cm78h","text":"import { render, screen } from '@testing-library/react';\nimport { Router } from 'react-router-dom';\nimport { createMemoryHistory } from 'history';\n\nimport Component from './ComponentReactRouter';\n\nconst renderWithRouter = (ui, options) =\u003e {\n  const history = createMemoryHistory();\n\n  const Wrapper = ({ children }) =\u003e (\n    \u003cRouter history={history}\u003e{children}\u003c/Router\u003e\n  );\n\n  const result = render(ui, {\n    wrapper: Wrapper,\n    ...options,\n  });\n\n  return { ...result, history };\n};\n\ndescribe('Component', () =\u003e {\n  it('should render component if isLoggedIn is true', () =\u003e {\n    const TestComponent = () =\u003e \u003cspan\u003etest\u003c/span\u003e;\n\n    render(\u003cComponent isLoggedIn ComponentToRender={TestComponent} /\u003e);\n\n    expect(screen.getByText('test')).toBeTruthy();\n  });\n\n  it('should redirect to login if isLoggedIn is false', () =\u003e {\n    const { history } = renderWithRouter(\u003cComponent isLoggedIn={false} /\u003e);\n\n    expect(history.location.pathname).toBe('/login');\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Full code snippet","body":null,"serialized_body":"\u003cp\u003eHere is a full code snippet:\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { render, screen } from \u0026#x27;@testing-library/react\u0026#x27;;\nimport { Router } from \u0026#x27;react-router-dom\u0026#x27;;\nimport { createMemoryHistory } from \u0026#x27;history\u0026#x27;;\n\nimport Component from \u0026#x27;./ComponentReactRouter\u0026#x27;;\n\nconst renderWithRouter = (ui, options) =\u0026gt; {\n  const history = createMemoryHistory();\n\n  const Wrapper = ({ children }) =\u0026gt; (\n    \u0026lt;Router history={history}\u0026gt;{children}\u0026lt;/Router\u0026gt;\n  );\n\n  const result = render(ui, {\n    wrapper: Wrapper,\n    ...options,\n  });\n\n  return { ...result, history };\n};\n\ndescribe(\u0026#x27;Component\u0026#x27;, () =\u0026gt; {\n  it(\u0026#x27;should render component if isLoggedIn is true\u0026#x27;, () =\u0026gt; {\n    const TestComponent = () =\u0026gt; \u0026lt;span\u0026gt;test\u0026lt;/span\u0026gt;;\n\n    render(\u0026lt;Component isLoggedIn ComponentToRender={TestComponent} /\u0026gt;);\n\n    expect(screen.getByText(\u0026#x27;test\u0026#x27;)).toBeTruthy();\n  });\n\n  it(\u0026#x27;should redirect to login if isLoggedIn is false\u0026#x27;, () =\u0026gt; {\n    const { history } = renderWithRouter(\u0026lt;Component isLoggedIn={false} /\u0026gt;);\n\n    expect(history.location.pathname).toBe(\u0026#x27;/login\u0026#x27;);\n  });\n});\u003c/code\u003e\u003c/pre\u003e","structured_body":{"blocks":[{"key":"6j23","text":"Here is a full code snippet:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"cm78h","text":"import { render, screen } from '@testing-library/react';\nimport { Router } from 'react-router-dom';\nimport { createMemoryHistory } from 'history';\n\nimport Component from './ComponentReactRouter';\n\nconst renderWithRouter = (ui, options) =\u003e {\n  const history = createMemoryHistory();\n\n  const Wrapper = ({ children }) =\u003e (\n    \u003cRouter history={history}\u003e{children}\u003c/Router\u003e\n  );\n\n  const result = render(ui, {\n    wrapper: Wrapper,\n    ...options,\n  });\n\n  return { ...result, history };\n};\n\ndescribe('Component', () =\u003e {\n  it('should render component if isLoggedIn is true', () =\u003e {\n    const TestComponent = () =\u003e \u003cspan\u003etest\u003c/span\u003e;\n\n    render(\u003cComponent isLoggedIn ComponentToRender={TestComponent} /\u003e);\n\n    expect(screen.getByText('test')).toBeTruthy();\n  });\n\n  it('should redirect to login if isLoggedIn is false', () =\u003e {\n    const { history } = renderWithRouter(\u003cComponent isLoggedIn={false} /\u003e);\n\n    expect(history.location.pathname).toBe('/login');\n  });\n});","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:29.100+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]},{"id":822,"position":11,"new_position":11,"published_attributes":{"type":"slide","answers":[],"title":"Exercise","body":null,"serialized_body":"\u003cp\u003eUse this component:\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { useHistory } from \u0026#x27;react-router-dom\u0026#x27;;\n\nconst Component = () =\u0026gt; {\n  const history = useHistory();\n\n  return \u0026lt;button onClick={() =\u0026gt; history.push(\u0026#x27;/lets-go\u0026#x27;)}\u0026gt;click!\u0026lt;/button\u0026gt;;\n};\n\nexport default Component;\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd check if clicking on button will redirect the user to /lets-go path. Use renderWithRouter and @testing-library/user-event to accomplish it.\u003c/p\u003e","structured_body":{"blocks":[{"key":"9ai9g","text":"Use this component:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8lntm","text":"import { useHistory } from 'react-router-dom';\n\nconst Component = () =\u003e {\n  const history = useHistory();\n\n  return \u003cbutton onClick={() =\u003e history.push('/lets-go')}\u003eclick!\u003c/button\u003e;\n};\n\nexport default Component;\n\n","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4ji5n","text":"And check if clicking on button will redirect the user to /lets-go path. Use renderWithRouter and @testing-library/user-event to accomplish it.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"draft_attributes":{"type":"slide","answers":[],"title":"Exercise","body":null,"serialized_body":"\u003cp\u003eUse this component:\u003c/p\u003e\u003cpre class=\"cce-content__code-block\"\u003e\u003ccode\u003eimport { useHistory } from \u0026#x27;react-router-dom\u0026#x27;;\n\nconst Component = () =\u0026gt; {\n  const history = useHistory();\n\n  return \u0026lt;button onClick={() =\u0026gt; history.push(\u0026#x27;/lets-go\u0026#x27;)}\u0026gt;click!\u0026lt;/button\u0026gt;;\n};\n\nexport default Component;\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd check if clicking on button will redirect the user to /lets-go path. Use renderWithRouter and @testing-library/user-event to accomplish it.\u003c/p\u003e","structured_body":{"blocks":[{"key":"9ai9g","text":"Use this component:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8lntm","text":"import { useHistory } from 'react-router-dom';\n\nconst Component = () =\u003e {\n  const history = useHistory();\n\n  return \u003cbutton onClick={() =\u003e history.push('/lets-go')}\u003eclick!\u003c/button\u003e;\n};\n\nexport default Component;\n\n","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4ji5n","text":"And check if clicking on button will redirect the user to /lets-go path. Use renderWithRouter and @testing-library/user-event to accomplish it.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}},"feedback":null,"cover_slide_data":{}},"published_at":"2021-01-18T11:54:29.100+01:00","estimated_time":1,"attachments_count":0,"presentable":true,"external_id":null,"attachments":[]}],"attachments":[]}